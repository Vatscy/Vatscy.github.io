<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ばしぶろ]]></title>
  <link href="http://vatscy.github.io/atom.xml" rel="self"/>
  <link href="http://vatscy.github.io/"/>
  <updated>2014-05-06T23:34:37+09:00</updated>
  <id>http://vatscy.github.io/</id>
  <author>
    <name><![CDATA[ばつしい]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【Mac】言語データを断捨離してみた]]></title>
    <link href="http://vatscy.github.io/blog/2014/05/06/monolingual/"/>
    <updated>2014-05-06T22:33:53+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/05/06/monolingual</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/monolingual1.jpg" alt="monolingual" /></p>

<p>Macは世界中の多様な言語に対応しています。(「日本語」とか「英語」とか)<br/>
ただ実際に使う言語って日本人ならせいぜい日本語と英語くらいですよね。</p>

<p>ということで<strong>不要な言語を断捨離してみた</strong>。</p>

<!-- more -->


<p>今回は<strong>monolingual</strong>という無料アプリを使います。</p>

<h2>monolingualのインストール</h2>

<p>以前紹介したHackStoreからインストールします。</p>

<ul>
<li><a href="http://vatscy.github.io/blog/2014/05/05/hackstore/">【Mac】HackStoreで非公式優良Appをインストール! &ndash; ばしぶろ</a></li>
</ul>


<p>HackStoreを開き、右上の検索バーに「monolingual」と入力し検索。</p>

<p><img src="http://vatscy.github.io/images/post/monolingual2.jpg" alt="monolingual" /></p>

<p>「DOWNLOAD」をクリックするとダウンロードが開始され、自動的にインストールまで行われます。</p>

<h2>monolingualを使ってみる</h2>

<p>アプリケーションフォルダからmonolingualを起動。<br/>
するといきなり削除する言語を問うてきます。なるほど、シンプル。</p>

<p><img src="http://vatscy.github.io/images/post/monolingual3.jpg" alt="monolingual" /></p>

<p>一番下に「日本語」と「英語」があります。<br/>
あと上の方にEnglishが何個かあったのでそれも残しておく。<br/>
ついでにChineseも残す(何となく)</p>

<p><strong>削除する言語を選択する</strong>ことに注意！<br/>
ミスると以下の警告の通り、OSの再インスコが必要になるみたいです。</p>

<p><img src="http://vatscy.github.io/images/post/monolingual4.jpg" alt="monolingual" /></p>

<p>まぁ断捨離は思い切ってやるもんなんで光の速さで削除ボタンをクリック。<br/>
すると言語データの削除が始まります。</p>

<p><img src="http://vatscy.github.io/images/post/monolingual5.jpg" alt="monolingual" /></p>

<p>断捨離完了！だいたい3分くらいかかりました。<br/>
<strong>2.42GB</strong>もあるんですね&hellip;侮り難し言語データ。</p>

<p>これで動作が軽くなるのかは知らないけど、何となく無駄が省けてスッキリしました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Mac】HackStoreで非公式優良Appをインストール！]]></title>
    <link href="http://vatscy.github.io/blog/2014/05/05/hackstore/"/>
    <updated>2014-05-05T10:20:10+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/05/05/hackstore</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/hackstore.jpg" alt="HackStore" /></p>

<p>Apple公式のApp Storeを利用すれば非常に多数のアプリをインストールすることができます。
Appleが審査しているのでユーザは非常に安心して利用することができます。</p>

<p>しかし、Appleの審査には時間がかかる、基準が厳しいというのが界隈では有名です。
なので、手続きがめんどくさい！やや訳ありで公式に配布はできない！という理由（多分）で各自のWebサイト上でアプリを提供している方も多数存在します。</p>

<p><em>そんな非公式なアプリの中には非常に優良なアプリが沢山！</em><br/>
<em>ただ、そんな隠れ優良アプリがWeb上に散在しているとなかなか知るキッカケがない！</em></p>

<p>そこで、今回はそれら非公式優良アプリをまとめている<strong>HackStore</strong>について紹介します。</p>

<!-- more -->


<h2>HackStoreのインストール</h2>

<p>【1】App Store以外からアプリをインストールできるように環境設定を変更します。</p>

<p>システム環境設定 → セキュリティとプライバシー を開き、『ダウンロードしたアプリケーションの実行許可』を<strong>すべてのアプリケーションを許可</strong>に設定します。</p>

<p><img src="http://vatscy.github.io/images/post/hackstore1.png" alt="環境設定" /></p>

<p>【2】以下の公式サイトから.dmgファイルをダウンロード。</p>

<ul>
<li><a href="http://www.hack-store.com/">HackStore | Free space for Mac apps</a></li>
</ul>


<p>【3】ダウンロードした.dmgファイルをダブルクリックしてインストール完了。</p>

<p><img src="http://vatscy.github.io/images/post/hackstore2.jpg" alt="スタート画面" /></p>

<h2>優良アプリが沢山</h2>

<p>眺めてみると、有名なアプリや、便利そうなアプリが沢山ありました。<br/>
今後このブログで紹介していきたいと思います。</p>

<p>Macユーザは是非HackStoreをインストールして隠れアプリを発掘してみて下さい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C#】Fakesを使った単体テストをCUIでビルド・テスト実行する方法]]></title>
    <link href="http://vatscy.github.io/blog/2014/05/02/build-fakes/"/>
    <updated>2014-05-02T18:52:01+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/05/02/build-fakes</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/build-fakes.jpg" alt="BuildFakes" /></p>

<p>私は普段Visual Studio 2013 Premiumを使って開発を行なっています。</p>

<p>単体テストを書く際に、モックライブラリとしてPremium以上で利用できる「<strong>Fakes</strong>」を使っています。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/hh549175.aspx">Microsoft Fakes を使用したテストでのコードの分離 &ndash; MSDN</a></li>
</ul>


<p>Fakesを使って単体テストを書いていて、そのプロジェクトをJenkinsでビルド・テスト実行しようとした際に少しハマったのでまとめておきます。</p>

<!-- more -->


<h2>MSBuildでビルドする</h2>

<p>C#のプロジェクトをビルドする時には<strong>MSBuild</strong>を使います。</p>

<p>Fakesを導入するとビルド時に必要なモックライブラリを生成してくれます。</p>

<p>この時、<strong>Visual StudioのPremium以上がインストールされていないと自動生成されずビルドに失敗してしまいます。</strong></p>

<p>開発している環境と、Jenkinsを置いている環境が異なる場合は注意が必要です。
私の場合JenkinsサーバにはPremium以上がインストールされていなかったのでこれでハマりました。</p>

<h2>vstest.consoleで単体テストを実行する</h2>

<p>MSTestにFakesを導入して記述した単体テストをコマンドプロンプトから実行します。</p>

<p>この時<em>MSTest.exe</em>では上手く実行できませんでした。
テストの実行自体はできるのですが、Fakesを使っているテストが失敗してしまいます。</p>

<p>そこで使用するのが、<strong>vstest.console.exe</strong>という実行ファイルです。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/jj155800.aspx">コマンド ラインからの VSTest.Console の使用 &ndash; MSDN</a></li>
</ul>


<p>デバッグモードでビルドした際は以下のようなコマンドでテスト実行ができます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vstest.console.exe TestProject\bin\Debug\TestProject.dll</span></code></pre></td></tr></table></div></figure>


<p>オプションに関しては公式サイトを。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/jj155796.aspx">VSTest.Console.exe コマンド ライン オプション &ndash; MSDN</a></li>
</ul>


<p>私は<code>/Enablecodecoverage</code>でカバレッジ計測、<code>/Logger:trx</code>で結果を出力しています。</p>

<p>さて、ここでまた注意ですが、やはり<strong>Premium以上のVisual Studioのインストールが必須となります。</strong></p>

<p>FakesはPremium以上がインストールされていないと利用できないんですね&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Git】ブランチを切り替え忘れて作業してしまった時の対処法]]></title>
    <link href="http://vatscy.github.io/blog/2014/03/30/git-branch-stash/"/>
    <updated>2014-03-30T21:28:28+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/03/30/git-branch-stash</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/git-stash.jpg" alt="GitStash" /></p>

<p>Git管理されたプロジェクトを更新していてこんな経験はありませんか？</p>

<ul>
<li>ブランチ切らずに作業してしまった！</li>
<li>違うブランチにコミットしてしまった！</li>
</ul>


<p>Git始めたての頃はよくやってました。最近でもたまにあります。</p>

<p>変更をしてしまった後でブランチを切り替えようとすると、場合によってはエラーが出て切り替えられない場合があります。</p>

<p><em>ブランチを切り替えつつ、変更内容も引き継ぎたい！</em></p>

<p>こんな時は次のコマンドを使います。</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git stash</span></code></pre></td></tr></table></div></figure>


<p>このコマンドを使うことで、<strong>コミットされていない変更内容を一時退避</strong>することができます。
この機能を<strong>スタッシュ</strong>といいます。</p>

<p>これを利用して上記問題を解決してみましょう。</p>

<h2>未コミットの変更を引き継ぎつつブランチを変更する</h2>

<p>未コミットの場合は、以下の手順でコマンドを実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git stash
</span><span class='line'>$ git checkout &lt;切り替えたいブランチ名&gt;
</span><span class='line'>$ git stash pop</span></code></pre></td></tr></table></div></figure>


<p><code>$ git stash pop</code>は、直前に一時退避した変更内容を取り出すコマンドです。
変更を一時退避し、ブランチを切り替え、一時退避していた変更を取り出す、という流れです。
ただ、場合によってはコンフリクト（衝突）が発生する可能性があるので、それは自分で対処しましょう。</p>

<p>また、わざわざこの方法を取らなくても、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout &lt;切り替えたいブランチ名&gt;</span></code></pre></td></tr></table></div></figure>


<p>だけで変更内容も引き継げるケースもあります。
まずはチェックアウトを試みて、エラーが出たら上記3コマンドを実行しましょう。</p>

<h2>コミット済みの変更を引き継ぎつつブランチを変更する</h2>

<p>「間違えて違うブランチでコミットしてしまった！」といったケースの対処法です。
この対処法は色々あるのですが、ここではスタッシュを使って対処する方法を紹介します。</p>

<p>要は、<strong>未コミットの状態まで戻せれば、上で紹介した手順が踏める</strong>わけです。</p>

<p>よって、以下のコマンドを実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git reset --soft HEAD^</span></code></pre></td></tr></table></div></figure>


<p>このコマンドは、最新のコミットを取り消して、未コミットの状態に戻すコマンドです。
ちなみに、<code>--soft</code>は「変更内容は残す」という意味で、<code>HEAD^</code>は「直前のコミット」という意味です。
「コミットした」という事実を取り消すだけで、変更内容自体は未コミットの状態で残ります。
この状態に戻して、上記の未コミットの場合の手順を踏めばいいわけです。</p>

<p>簡単ですね(・∀・)</p>

<h2>まとめ</h2>

<p>この記事を通して何が言いたかったかというと、「<strong>スタッシュ便利だよ</strong>」ということですww</p>

<p>今回はブランチ切り替え時のスタッシュの有用性についてまとめました。
しかしそれ以外にもスタッシュは様々な場面で使えるので、スタッシュという機能があるということを覚えておくときっと役に立つはずです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DDD(ドメイン駆動設計)入門してみた]]></title>
    <link href="http://vatscy.github.io/blog/2014/03/08/ddd/"/>
    <updated>2014-03-08T22:53:45+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/03/08/ddd</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/ddd.jpg" alt="DDD" /></p>

<p>現場に配属されて数ヶ月が経ち、業務にも徐々に慣れてきました。
エンジニアとしての知識もわりとついてきたんじゃないかと思いますが、圧倒的に自分に足りないなと思うのは<strong>設計力</strong>です。</p>

<p>そこで、上司からの薦めもあり、DDD(ドメイン駆動設計)入門してみました。
DDDについて調べた過程、それに対して私が感じたことをまとめてみようと思います。</p>

<!--more-->


<h2>DDD(ドメイン駆動設計)とは</h2>

<p>そもそも、DDDとは何なのか？</p>

<blockquote><p><strong>ドメイン駆動設計(英: Domain-driven design, DDD)</strong>とはソフトウェアの設計手法であり、&#8217;複雑なドメインの設計はモデルベースで行うべきであり&#8217;、&#8217;また大半のソフトウェアプロジェクトではシステムを実装するための特定の技術ではなくドメインそのものとドメインのロジックに焦点を置くべき&#8217;とする。この名称は Eric Evans が同名の著作で用いた。<br/>
書籍 Domain-Driven Designでは、たとえば ubiquitous language といった高位の概念と実践について多数述べられている。これは、ドメインモデルがシステムの要求を記述するためにドメインの専門家が提供し、業務上のユーザーやスポンサー、開発者みなにとってうまく働くような common language(共通言語)を形成するべきである、という考えである。同書は多層アーキテクチャを持つオブジェクト指向システムにおいて、一般的なレイヤ構造におけるドメイン層を記述することに重点を置いている。<br/>
(Wikipediaより引用)</p></blockquote>

<p>つまり、「ドメイン」を中心として設計を行うってことでいいのかな？</p>

<p>これだけだとよく分からない&hellip;</p>

<p>そこで、上司にオススメ頂いたサイトがあるので列挙しておく。</p>

<ul>
<li><a href="http://www.ogis-ri.co.jp/otc/hiroba/technical/DDDEssence/">DDD難民に捧げる Domain-Driven Designのエッセンス</a></li>
<li><a href="http://www.infoq.com/jp/minibooks/domain-driven-design-quickly">Domain Driven Design(ドメイン駆動設計) Quickly 日本語版</a></li>
<li><a href="https://www.youtube.com/watch?v=77BTZWq3GiQ">20110409_DevLOVE「実践！　ドメイン駆動設計」_増田亨さん</a></li>
</ul>


<p>1つ目の「エッセンス」は、まさにDDDのエッセンスを簡潔にまとめてあるサイト。このサイトを見れば大まかに「DDDとは何ぞや」が分かります。</p>

<p>2つ目の「Quickly」は、DDDの原著の要約を日本語訳したものを無料ダウンロードできるサイト。無料にも関わらず中身は充実の100ページ弱！ありがたいです。</p>

<p>3つ目の動画は、有限会社システム設計の代表取締役・増田亨さん(<a href="https://twitter.com/masuda220">@masuda220</a>)のDDDの講演動画です。具体例を絡めて非常に分かり易く解説なされています。読書が嫌いな私にとって動画は非常にありがたいw</p>

<p>軽く参考ページを挙げてみましたが、正直全てを隅々まで見ることができていません&hellip;
もう少し時間をかけてゆっくり理解していこうと思います。</p>

<p>ということで、DDDについての解説は私は現状できませんw
もう少し学んでからリベンジしたいと思います。</p>

<h2>気づいたこと</h2>

<p>DDDについて学び始めて気づいたことは、<strong>設計の初歩から始めないと駄目だな</strong>ということです。</p>

<p>例えば、DDDの考え方の基礎となる<em>オブジェクト指向</em>。エンジニアなら誰でも知っていると思います。さすがにポンコツの私ですら知っていますw<br/>
カプセル化、インヘリタンス（継承）、ポリモーフィズム&hellip;説明もできます。</p>

<p>しかし、いざ「オブジェクト指向を基に設計してみよう！」と思っても自信を持って設計できる気がしません&hellip;</p>

<p>なのでまずは<strong>オブジェクト指向設計</strong>から始めてみようと思います。</p>

<p>何か最近、自分に不足していると感じること、学びたいことが沢山ありすぎてつらいですが、広く手を出して浅くなってしまうのは無個性すぎるので、スコープを狭めて深く学び、個性を出していきたい。と言っても基礎が薄いので固めなければならない、という状況で歯がゆい。しばらくは足掻きたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スーパードンキーコング2のBGMリミックス集「Serious Monkey Business」のクオリティがやばい]]></title>
    <link href="http://vatscy.github.io/blog/2014/02/23/serious-monkey-business/"/>
    <updated>2014-02-23T01:01:37+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/02/23/serious-monkey-business</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/donkeykong2.png" alt="SuperDonkeyKong2" /></p>

<p>スーパーファミコンの名作「<strong>スーパードンキーコング2</strong>」（以下SDK2）。</p>

<p>発売当時の私は6歳。
帰ってきて即効スーファミの電源を付けて、これと星のカービィSDXを永遠と遊んでいた記憶があります。
大学生になり、Wiiのバーチャルコンソールで買い直して遊びましたがやっぱりメチャメチャ面白いですね！</p>

<p>そんなSDK2、ゲームの内容ももちろんですが、<strong>BGMの評価もとても高い</strong>ですよね。
私自身ゲームのBGMが凄く好きで、色んなゲームのサウンドトラックをiPodに入れてます。
<strong>ドライブ中にマリオカートのスターのBGM流すのはオススメです。</strong></p>

<p>SDK2のBGMは群を抜いて好きです。特に<a href="http://www.youtube.com/watch?v=zK4TWXWEKAQ">とげとげタルめいろ</a>と<a href="http://www.youtube.com/watch?v=bnWktjTMZb0">ハニー・アドベンチャー</a>は神です。</p>

<h2>Serious Monkey Business</h2>

<p>さて本題です。</p>

<p><strong>SDK2のBGMがアレンジされて、ウェブ上で無料配信されているのをご存知でしたか？</strong></p>

<!-- more -->


<p>それがこちら→ <a href="http://dkc2.ocremix.org/">Serious Monkey Business</a></p>

<p>「Download Music」→「Download the Complete .zip file」からzipを落とすことができます。</p>

<p>多数の著名アーティストが約2年半の歳月をかけて作り上げたらしい。
更に凄いのが、実際にSDK2のコンポーザをされていたDavid Wise氏もアレンジに参加しています。
つまり<strong>ほぼ公式</strong>。</p>

<p>以下がトレーラームービーです。</p>

<h3>トレーラームービー</h3>

<iframe width="560" height="315" src="http://vatscy.github.io//www.youtube.com/embed/pP0nb5R3nwU" frameborder="0" allowfullscreen></iframe>


<p>ロック、テクノ、オーケストラなど様々なテイストにアレンジされていて面白いですね。歌付きもあったり。</p>

<hr />

<p>個人的にお気に入りなのが以下の2曲。</p>

<h3>Roller Disco (原曲: どくろコースター)</h3>

<iframe width="420" height="315" src="http://vatscy.github.io//www.youtube.com/embed/Rq9OOvtMxM8" frameborder="0" allowfullscreen></iframe>


<p>トランス調にアレンジされていてノリノリになれます。<br/>
最後のサルボイスと敵ボイスがいいですねwww</p>

<h3>Bramble Reprise (原曲: とげとげタルめいろ)</h3>

<iframe width="420" height="315" src="http://vatscy.github.io//www.youtube.com/embed/BQhKibpZuA0" frameborder="0" allowfullscreen></iframe>


<p>やはり名曲だけあってアレンジも雰囲気出てていいですね。<br/>
ちなみにとげとげタルめいろはスマブラXでもアレンジされてましたね。<br/>
ちなみに私は断然原曲派です（ｷﾘｯ</p>

<hr />

<p>いかがだったでしょうか。<br/>
これらが全部無料で落とせるって凄いですね。</p>

<p>ちなみに、ゲームサウンドアレンジ配信サイト<a href="http://ocremix.org/">OverClocked ReMix</a>では、SDK2以外にもゼルダやFFなどのアレンジも配信しているようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ページ読み込み時のJavaScriptの実行タイミング]]></title>
    <link href="http://vatscy.github.io/blog/2014/02/22/document-ready/"/>
    <updated>2014-02-22T12:12:05+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/02/22/document-ready</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/document-ready.jpg" alt="DocumentReady" /></p>

<p>HTMLページを読み込む際のJavaScriptの実行タイミングは色々あります。
タイミングをミスると意図したように動作しないことがあるので注意が必要です。</p>

<p>いくつかパターンを見ていきます。</p>

<!-- more -->


<h2>通常実行</h2>

<p>特に意識せずにJavaScriptを記述したり読み込んだりすると、<strong>書いた順番に処理</strong>されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Title<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;main.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- ↑このタイミングで実行される --&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;ears&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">element</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;∧＿＿∧&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- ↑このタイミングで実行される --&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;ears&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;face&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;face&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">element</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;(・∀・)&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- ↑このタイミングで実行される --&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のHTMLを読み込むと、(main.jsの中身は空として)画面には何が表示されるでしょうか？</p>

<p>正解は、</p>

<p>(・∀・)</p>

<p>と表示されます。</p>

<p>耳が表示されないのは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;ears&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>の時点ではまだ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;ears&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>が読み込まれておらず、指定できないからです。</p>

<p>ソースの可読性やMVCといった観点から、HTML内に直接JavaScriptを記述するのは好ましくありません(持論)。
なので通常は<code>&lt;head&gt;</code>タグ内で外部JSファイルを読み込む形になると思いますが、
何も意識せずに書くと、上記のような問題が発生します。</p>

<p>そこで、HTMLが読み込まれた<strong>後</strong>にJavaScriptを実行する必要があります。</p>

<h2>読み込み後実行</h2>

<p><a href="http://jquery.com">jQuery</a>を用いて下記のように記述すると、<strong>HTMLが全て読み込まれた後にJavaScriptを実行</strong>できます。
3パターン挙げますが、全て処理は同じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// 読み込み後に実行する処理</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">().</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// 読み込み後に実行する処理</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// 読み込み後に実行する処理</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>個人的には一番下がシンプルで好みです。</p>

<p>これを使って先程のコードを書き直してみると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Title<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- jQueryの読み込みが必要 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;lib/jquery/jquery.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;main.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;ears&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">element</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;∧＿＿∧&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;face&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">element</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;(・∀・)&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="c1">// --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;ears&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;face&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>処理の記述は<code>&lt;div&gt;</code>より先ですが、HTMLが読み込まれた後に実行されるので、表示結果は</p>

<p>∧＿＿∧<br/>
(・∀・)</p>

<p>となります。（ずれてるけど）</p>

<h2>完全読み込み後実行</h2>

<p>HTMLだけでなく、<strong>全ての関連ファイルを読み込んだ後に実行</strong>する処理を書くこともできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 完全読み込み後に実行する処理</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>場合によって上手く使い分けましょう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Markdown】記法まとめ]]></title>
    <link href="http://vatscy.github.io/blog/2013/12/23/markdown-matome/"/>
    <updated>2013-12-23T20:31:26+09:00</updated>
    <id>http://vatscy.github.io/blog/2013/12/23/markdown-matome</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/markdown.jpg" alt="Markdown" /></p>

<p>今回は<strong>Markdown</strong>についてまとめてみます。</p>

<h2>Markdownとは</h2>

<blockquote><p>Markdown は、文書を記述するための軽量マークアップ言語のひとつである。(<a href="http://ja.wikipedia.org/wiki/Markdown" target="_blank">Wikipedia</a>より引用)</p></blockquote>

<p>つまり、テキストに構造をつける言語です。</p>

<p>ちなみにこのブログもMarkdownで記述されています。</p>

<p>これからブログを書いていく上でまとめておいた方が良さそうだったのでまとめてみます。</p>

<p>(要は自分のため)</p>

<!-- more -->


<h2>記法</h2>

<h3>見出し</h3>

<p>HTMLにおける<code>&lt;h1&gt;</code>〜<code>&lt;h6&gt;</code>。<br/>
<strong>#の数</strong>で区別します。</p>

<h4>(例)</h4>

<h1>h1</h1>

<pre><code># h1
</code></pre>

<h2>h2</h2>

<pre><code>## h2
</code></pre>

<h3>h3</h3>

<pre><code>### h3
</code></pre>

<h4>h4</h4>

<pre><code>#### h4
</code></pre>

<h5>h5</h5>

<pre><code>##### h5
</code></pre>

<h6>h6</h6>

<pre><code>###### h6
</code></pre>

<h3>改行</h3>

<p>HTMLにおける<code>&lt;br&gt;</code>。<br/>
<strong>行末に半角スペースを2個以上記述する</strong>ことで実現します。<br/>
ただ改行を入れるだけでは反映されないので注意！</p>

<h3>段落</h3>

<p>HTMLにおける<code>&lt;p&gt;</code>。<br/>
<strong>空行を挟む</strong>ことで段落分けします。<br/>
空行を挟まない改行は反映されないので注意！</p>

<h4>(例)</h4>

<p>さすがディオ!
俺達に出来ないことを平然とやってのけるッ!</p>

<p>そこにシビれる!
あこがれるゥ!</p>

<pre><code>さすがディオ!
俺達に出来ないことを平然とやってのけるッ!

そこにシビれる!
あこがれるゥ!
</code></pre>

<h3>強調</h3>

<p>HTMLにおける<code>&lt;em&gt;</code>と<code>&lt;strong&gt;</code>。<br/>
<code>&lt;em&gt;</code>は * または _ で囲み、<code>&lt;strong&gt;</code>は ** または __ で囲みます。<br/>
ちなみに、<code>&lt;em&gt;</code>より<code>&lt;strong&gt;</code>の方が強い強調を表します。</p>

<h4>(例)</h4>

<p><em>ウボォーさん</em>、聞こえますか？オレ達から貴方への<strong>鎮魂歌</strong>です</p>

<pre><code>*ウボォーさん*、聞こえますか？オレ達から貴方への**鎮魂歌**です
</code></pre>

<h3>コード</h3>

<p>HTMLにおける<code>&lt;code&gt;</code>。<br/>
先程から使っている<code>これ</code>や</p>

<pre><code>これ
</code></pre>

<p>です。<br/>
インライン(1つ目)の場合は<strong> ｀(グレイヴアクセント) で囲み</strong>ます。<br/>
段落(2つ目)の場合は<strong>行頭にTabを挿入</strong>、または<strong> ｀(グレイヴアクセント)3つで行を囲み</strong>ます。</p>

<h4>(例)</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>`インライン`
</span><span class='line'>
</span><span class='line'>  Tab
</span><span class='line'>
</span><span class='line'> ```
</span><span class='line'> グレイヴアクセント囲み
</span><span class='line'> ```</span></code></pre></td></tr></table></div></figure>


<h3>順序無しリスト</h3>

<p>HTMLにおける<code>&lt;ul&gt;&lt;li&gt;</code>。<br/>
行頭に<strong> (* + &ndash; のうちのどれか1つ) ＋ 半角スペース</strong>を挿入することで実現します。<br/>
また、さらに<strong>行頭に半角スペース4つを入れる</strong>ことでサブアイテムを作ることもできます。</p>

<h4>(例)</h4>

<ul>
<li>強化系

<ul>
<li>ゴン</li>
</ul>
</li>
<li>変化形

<ul>
<li>キルア</li>
</ul>
</li>
<li>具現化形

<ul>
<li>クラピカ</li>
</ul>
</li>
<li>操作系</li>
<li>放出系

<ul>
<li>レオリオ</li>
</ul>
</li>
<li>特質形</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* 強化系
</span><span class='line'>    + ゴン
</span><span class='line'>+ 変化形
</span><span class='line'>    - キルア
</span><span class='line'>+ 具現化形
</span><span class='line'>    * クラピカ
</span><span class='line'>+ 操作系
</span><span class='line'>* 放出系
</span><span class='line'>    + レオリオ
</span><span class='line'>- 特質形</span></code></pre></td></tr></table></div></figure>


<h3>順序付きリスト</h3>

<p>HTMLにおける<code>&lt;ol&gt;&lt;li&gt;</code>。<br/>
行頭に<strong>数字 ＋ ピリオド</strong>を挿入することで実現します。</p>

<h4>(例)</h4>

<ol>
<li>ファントムブラッド</li>
<li>戦闘潮流</li>
<li>スターダストクルセイダーズ</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. ファントムブラッド
</span><span class='line'>2. 戦闘潮流
</span><span class='line'>3. スターダストクルセイダーズ</span></code></pre></td></tr></table></div></figure>


<h3>引用</h3>

<p>HTMLにおける<code>&lt;blockquote&gt;</code>、<code>&lt;q&gt;</code>、<code>&lt;cite&gt;</code>。<br/>
行頭に<strong> > ＋ 半角スペース</strong>を挿入することで実現します。</p>

<h4>(例)</h4>

<blockquote><p>恐ろしく速い手刀 オレでなきゃ見逃しちゃうね<br/>
(by 団長の手刀を見逃さなかった人 &ndash; HUNTER×HUNTER11巻より抜粋)</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; 恐ろしく速い手刀 オレでなきゃ見逃しちゃうね  
</span><span class='line'>&gt; (by 団長の手刀を見逃さなかった人 - HUNTER×HUNTER11巻より抜粋)</span></code></pre></td></tr></table></div></figure>


<h3>水平線</h3>

<p>HTMLにおける<code>&lt;hr&gt;</code>。<br/>
1行の中に<strong> &ndash; (ハイフン)、 * (アスタリスク)、 _ (アンダースコア)のうちどれか1種を3個以上並べる</strong>ことで実現します。
間に半角スペースを挟んでもOKです。</p>

<h4>(例)</h4>

<hr />

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>****
</span><span class='line'>_ _ _ _ _</span></code></pre></td></tr></table></div></figure>


<h3>テーブル</h3>

<p>HTMLにおける<code>&lt;table&gt;</code>。</p>

<h4>(例)</h4>

<table>
<thead>
<tr>
<th align="left">左寄せ </th>
<th align="center"> 中央寄せ </th>
<th align="right"> 右寄せ</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">左に </td>
<td align="center"> 中央に </td>
<td align="right"> 右に</td>
</tr>
<tr>
<td align="left">受け流すスタイル </td>
<td align="center"> 居座るスタイル </td>
<td align="right"> 寄せていくスタイル</td>
</tr>
<tr>
<td align="left">on </td>
<td align="center"> on </td>
<td align="right"> on</td>
</tr>
<tr>
<td align="left">the </td>
<td align="center"> the </td>
<td align="right"> the</td>
</tr>
<tr>
<td align="left">left </td>
<td align="center"> center </td>
<td align="right"> right</td>
</tr>
</tbody>
</table>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>左寄せ | 中央寄せ | 右寄せ
</span><span class='line'>:-----|:----:|-----:
</span><span class='line'>左に | 中央に | 右に
</span><span class='line'>受け流すスタイル | 居座るスタイル | 寄せていくスタイル
</span><span class='line'>on | on | on
</span><span class='line'>the | the | the
</span><span class='line'>left | center | right</span></code></pre></td></tr></table></div></figure>


<h3>リンク</h3>

<p>HTMLにおける<code>&lt;a&gt;</code>。<br/>
<code>[リンクのテキスト](URL "タイトル")</code> の形式で実現します。</p>

<h4>(例)</h4>

<p><a href="http://www.geocities.jp/yuusuke4971/" title="かの有名なサイト">ゆうすけのホームページ</a></p>

<pre><code>[ゆうすけのホームページ](http://www.geocities.jp/yuusuke4971/ "かの有名なサイト")
</code></pre>

<hr />

<p>また、リンクの情報を一カ所にまとめておいて、<br/>
実際にリンクを貼る場所でその情報を持ってくることもできます。</p>

<h4>(例)</h4>

<p><a href="http://www.google.co.jp" title="ごおgれ">Google</a><br/>
<a href="http://www.yahoo.co.jp" title="やほお">Yahoo!</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Google][0]  
</span><span class='line'>[Yahoo!][1]
</span><span class='line'>
</span><span class='line'>[0]: http://www.google.co.jp "ごおgれ"
</span><span class='line'>[1]: http://www.yahoo.co.jp "やほお"</span></code></pre></td></tr></table></div></figure>


<h3>画像</h3>

<p>HTMLにおける<code>&lt;img&gt;</code>。<br/>
<code>![画像の説明文](画像URL)</code> の形式で実現します。</p>

<h4>(例)</h4>

<p><img src="http://vatscy.github.io/images/post/YMD68_TKG500.jpg" alt="そんな好きじゃない" /></p>

<pre><code>![そんな好きじゃない](http://vatscy.github.io/images/post/YMD68_TKG500.jpg)
</code></pre>

<h3>その他</h3>

<ul>
<li>半角バックスラッシュまたは半角￥をMarkdownの直前に挿入することでエスケープ可能。</li>
<li>HTMLタグを直接記述することも可能。複雑な処理はHTMLタグで書こう。</li>
<li>GitHubでは<a href="https://help.github.com/articles/github-flavored-markdown" title="GFM">GitHub Flavored Markdown</a>というアレンジされたMarkdownが使われているので、専用の文法が存在する。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Write]]></title>
    <link href="http://vatscy.github.io/blog/2013/12/21/first-write/"/>
    <updated>2013-12-21T01:20:40+09:00</updated>
    <id>http://vatscy.github.io/blog/2013/12/21/first-write</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/first-write.jpg" alt="First Write" /></p>

<h2>はじめに</h2>

<p>初めまして、ばつしいです。<br/>
今日からゆるゆるとブログを綴っていこうと思います。<br/>
テーマは技術的なことを書こうと思いますが、たまには気の赴くままに書いてみようかなと思っています。</p>

<!-- more -->


<p>簡単に自己紹介します。</p>

<p>2013年3月に某C大学の数学科を卒業し、<br/>
2013年4月に新卒未経験で開発職として社会人を始めました。<br/>
長い研修期間を経て、先日ついに配属され、業務を開始しました。</p>

<p>開発職として働き始めたので、私的に何か始めようと思い、ブログを書き始める次第です。<br/>
駆け出しエンジニアの拙いブログですが、誰かのお役に立てれば幸いです。</p>

<p>具体例を多用してわかりやすくしていきたいなと思っています。<br/>
何となく好きな漫画ネタが多くなるような予感がしてます。</p>

<p>ちなみにHUNTER×HUNTERとジョジョが好きです。<br/>
特にHUNTER×HUNTERは結構マニアックな所まで知っています。蟻編が好きです。<br/>
ジョジョは4部後半と5部が好きです。実は6部以降はまだ読んでません(にわか)</p>

<p>あと最近は監獄学園にハマってます。これは世の男性にはマジでオススメ！</p>

<hr />

<p>後半話が脱線しましたが、とりあえず初回はこんな感じで！</p>
]]></content>
  </entry>
  
</feed>
