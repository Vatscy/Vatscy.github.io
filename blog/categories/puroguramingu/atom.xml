<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: プログラミング | ばしぶろ]]></title>
  <link href="http://vatscy.github.io/blog/categories/puroguramingu/atom.xml" rel="self"/>
  <link href="http://vatscy.github.io/"/>
  <updated>2014-06-28T15:57:28+09:00</updated>
  <id>http://vatscy.github.io/</id>
  <author>
    <name><![CDATA[ばつしい]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【ASP.NET】APIのルーティングを設定する2つの方法【WebAPI】]]></title>
    <link href="http://vatscy.github.io/blog/2014/06/08/api-routing/"/>
    <updated>2014-06-08T22:31:27+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/06/08/api-routing</id>
    <content type="html"><![CDATA[<p>ASP.NET Web APIでルーティングを行う方法は大きく分けて以下の2つです。<br/>
(私が知る限りでは)</p>

<ol>
<li>WebApiConfigで一括定義する</li>
<li>Attributeを付与して個別定義する</li>
</ol>


<p>今回はその2つの方法について解説していきます。</p>

<!-- more -->


<h2>そもそもルーティングとは</h2>

<p>ASP.NET Web APIは、その名の通りAPIを提供するためのフレームワークです。<br/>
実装としては、Controllerクラスを作り、その中にメソッドを定義します。<br/>
基本的にはメソッド1つに対してAPI1本が対応します。</p>

<p>ルーティングとは、あるURLにリクエストが来たときにどのAPIを呼び出すか、すなわち、<strong>リクエストURLと、呼び出すメソッドを結びつけること</strong>です。</p>

<h2>方法1: WebApiConfigで一括定義する</h2>

<p>ASP.NET Web APIのプロジェクトを新規作成した場合、このルーティング方法がデフォルトで採用されていると思います。</p>

<p>WebApiConfig.csで以下のように定義します。
```csharp
public static class WebApiConfig
{</p>

<pre><code>public static void Register(HttpConfiguration config)
{
    config.Routes.MapHttpRoute(
        name: "DefaultApi",
        routeTemplate: "api/{controller}/{action}/{id}",
        defaults: new { id = RouteParameter.Optional }
    );
}
</code></pre>

<p>}
<code>``
Registerというメソッド内でconfigにルーティングを追加します。  
例えば上記の例だと、</code><a href="http://sample.jp/api/profile/get/5">http://sample.jp/api/profile/get/5</a><code>というURLをコールすると、**ProfileController**の**Get**メソッドが呼び出されます。  
</code>{controller}<code>の部分がコントローラ名、</code>{action}<code>の部分がメソッド名に対応するわけです。  
ちなみに</code>config.Routes.MapHttpRoute`を複数回呼び出すことで規則を複数定義することができます。その場合、先に定義した規則が優先して適用されます。</p>

<p>メソッドの実装はこちら。</p>

<p>```csharp
public class ProfileController : ApiController
{</p>

<pre><code>[HttpGet]
public HttpResponseMessage Get(int id)
{
    ... 
}
</code></pre>

<p>}
```</p>

<p>ルーティング設定に含まれている<code>id</code>は何かというと、メソッドに渡すパラメータです。<br/>
メソッドで上記のようにパラメータを受け取るように定義しておけば、URLの<code>{id}</code>の部分に指定した値を受け取ることができます。</p>

<p>ルーティング設定の中の
<code>
defaults: new { id = RouteParameter.Optional }
</code>
は、ルーティング時のデフォルト値の設定になります。<br/>
<code>RouteParameter.Optional</code>は「<em>このパラメータは省略可能である</em>」ことを意味します。<br/>
つまり<code>{id}</code>はあってもなくてもいいという意味です。</p>

<p>ちなみにデフォルトとして以下のように設定することもできます。
<code>
defaults: new { controller = "profile", action = "get", id = RouteParameter.Optional }
</code>
このように設定すると、<code>{controller}</code>や<code>{action}</code>を省略することが可能になります。<br/>
つまり<code>http://sample.jp/api/</code>というURLでアクセスすると勝手にProfileControllerのGetメソッドが呼ばれるわけです。</p>

<h3>アクション名を指定する</h3>

<p>例えば、「<strong>メソッド名は具体的に記述する</strong>」というチームルールがあったとします。<br/>
しかし、例えば以下のようなメソッドがあったとします。
```csharp
public class ProfileController : ApiController
{</p>

<pre><code>[HttpGet]
public HttpResponseMessage FindProfileByConsumerId(int id)
{
    ... 
}
</code></pre>

<p>}
<code>``
このとき、APIのURLは</code><a href="http://sample.jp/api/profile/findProfileByConsumerId/5">http://sample.jp/api/profile/findProfileByConsumerId/5</a>`となってしまいます。長い&hellip;</p>

<p>これを回避するために、ルーティングする文字列を別に指定することができます。<br/>
以下のように<code>ActionName</code>属性をメソッドに付与します。
```csharp
[HttpGet]
[ActionName(&ldquo;get&rdquo;)]
public HttpResponseMessage FindProfileByConsumerId(int id)
{</p>

<pre><code>... 
</code></pre>

<p>}
<code>``
こうすると</code><a href="http://sample.jp/api/profile/get/5">http://sample.jp/api/profile/get/5</a><code>というURLで、  
</code>FindProfileByConsumerId`メソッドを呼び出すことができます。</p>

<h2>方法2: Attributeを付与して個別定義する</h2>

<p>この方法は<strong>全てのメソッドにルーティング方法を明記する</strong>方法です。</p>

<p>まずWebApiConfig.csで以下のように宣言します。
```csharp
public static class WebApiConfig
{</p>

<pre><code>public static void Register(HttpConfiguration config)
{
    config.MapHttpAttributeRoutes();
}
</code></pre>

<p>}
```</p>

<p>次にメソッドに<code>Route</code>属性を付与します。
```csharp
public class ProfileController : ApiController
{</p>

<pre><code>[HttpGet]
[Route("api/profile/{id}")]
public HttpResponseMessage FindProfileByConsumerId(int id)
{
    ... 
}
</code></pre>

<p>}
<code>``
このように定義すると、</code><a href="http://sample.jp/api/profile/5">http://sample.jp/api/profile/5</a>`に対してこのメソッドが呼ばれるようになります。</p>

<p>APIを複数実装(メソッドを追加)する場合は必ず<code>Route</code>属性を付与します。
```csharp
public class ProfileController : ApiController
{</p>

<pre><code>[HttpGet]
[Route("api/profile/{id}")]
public HttpResponseMessage FindProfileByConsumerId(int id)
{
    ... 
}

[HttpPost]
[Route("api/profile/update")]
public void UpdateConsumerProfile(Profile profile)
{
    ...
}
</code></pre>

<p>}
<code>
ただ、上のように毎回`api/profile/`の部分を書いていくのは面倒だしメンテナンスしづらい。  
そういった場合は`RoutePrefix`属性で共通化します。
</code>csharp
[RoutePrefix(&ldquo;api/profile&rdquo;)]
public class ProfileController : ApiController
{</p>

<pre><code>[HttpGet]
[Route("{id}")]
public HttpResponseMessage FindProfileByConsumerId(int id)
{
    ... 
}

[HttpPost]
[Route("update")]
public void UpdateConsumerProfile(Profile profile)
{
    ...
}
</code></pre>

<p>}
```</p>

<h2>まとめ</h2>

<p>ルーティングする際には基本的には上で説明した2パターンのどちらかを採用するのがいいかなー、と思います。</p>

<p>ちなみに上記2パターンを併用することもできます。そこはお好みで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正規表現を解析して可視化してくれるサイトが凄すぎる件]]></title>
    <link href="http://vatscy.github.io/blog/2014/05/17/regexper/"/>
    <updated>2014-05-17T08:10:37+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/05/17/regexper</id>
    <content type="html"><![CDATA[<p>ある正規表現に対して、特定の文字列がマッチするかどうかをチェックするツールやサイトは沢山ありますが、<em>正規表現そのものが何を意味しているのか、どんな文字列を期待しているのか</em>を解析・解読・説明してくれるツールやサイトってなかなか見ない気がします。</p>

<p>僕は馬鹿なので正規表現を見ても何が何だかさっぱりわかりません。<br/>
例えばこれ。</p>

<p><code>
^[a-zA-Z0-9-_.]@([a-zA-Z0-9_-]+\.)+[a-zA-Z]{2,4}$
</code></p>

<p>いつかはマスターしたいけど&hellip;今は楽したい。<br/>
そう思ってググってみると&hellip;ありました！</p>

<!--more-->


<p>それがこちら。</p>

<ul>
<li><a href="http://www.regexper.com/">Regexper</a></li>
</ul>


<p>正規表現を入力して Display をクリックすると、その正規表現が表す内容を図にして表示してくれます。</p>

<p>例えば先程の正規表現は、当記事の一番上の画像のように表示されます。<br/>
これはメールアドレスを判定する簡易的な正規表現です。</p>

<h2>使ってみる</h2>

<p>こちらの正規表現を試してみましょう。</p>

<p><code>
(^(?!090|080|070)(^\d{2,5}?\-\d{1,4}?\-\d{4}$|^[\d\-]{12}$))|(^(090|080|070)(\-\d{4}\-\d{4}|[\d-]{13})$)|(^0120(\-\d{2,3}\-\d{3,4}|[\d\-]{12})$)|(^0080\-\d{3}\-\d{4})
</code></p>

<p><code>090</code>とか<code>080</code>とかあるので電話番号の正規表現です。</p>

<ul>
<li>フォームに正規表現を入力</li>
</ul>


<p><img src="http://vatscy.github.io/images/post/regexper2.jpg" alt="regexper" /></p>

<ul>
<li>Displayをクリックすると図が表示される</li>
</ul>


<p><img src="http://vatscy.github.io/images/post/regexper3.jpg" alt="regexper" /></p>

<p>見方としては、左から線をたどっていって、分岐があれば好きな方に行ける。
最終的に一番右に到達するまでに出てきた文字をつなげたような文字列を期待しています。
(解説下手だけどこの記事を読んでる人ならわかると信じたい)</p>

<p>簡単でわかりやすい！</p>

<p>GitHubで開発しているみたいです。こんなサイトを作りたいなぁ&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C#】Fakesを使った単体テストをCUIでビルド・テスト実行する方法]]></title>
    <link href="http://vatscy.github.io/blog/2014/05/02/build-fakes/"/>
    <updated>2014-05-02T18:52:01+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/05/02/build-fakes</id>
    <content type="html"><![CDATA[<p>私は普段Visual Studio 2013 Premiumを使って開発を行なっています。</p>

<p>単体テストを書く際に、モックライブラリとしてPremium以上で利用できる「<strong>Fakes</strong>」を使っています。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/hh549175.aspx">Microsoft Fakes を使用したテストでのコードの分離 &ndash; MSDN</a></li>
</ul>


<p>Fakesを使って単体テストを書いていて、そのプロジェクトをJenkinsでビルド・テスト実行しようとした際に少しハマったのでまとめておきます。</p>

<!-- more -->


<h2>MSBuildでビルドする</h2>

<p>C#のプロジェクトをビルドする時には<strong>MSBuild</strong>を使います。</p>

<p>Fakesを導入するとビルド時に必要なモックライブラリを生成してくれます。</p>

<p>この時、<strong>Visual StudioのPremium以上がインストールされていないと自動生成されずビルドに失敗してしまいます。</strong></p>

<p>開発している環境と、Jenkinsを置いている環境が異なる場合は注意が必要です。
私の場合JenkinsサーバにはPremium以上がインストールされていなかったのでこれでハマりました。</p>

<h2>vstest.consoleで単体テストを実行する</h2>

<p>MSTestにFakesを導入して記述した単体テストをコマンドプロンプトから実行します。</p>

<p>この時<em>MSTest.exe</em>では上手く実行できませんでした。
テストの実行自体はできるのですが、Fakesを使っているテストが失敗してしまいます。</p>

<p>そこで使用するのが、<strong>vstest.console.exe</strong>という実行ファイルです。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/jj155800.aspx">コマンド ラインからの VSTest.Console の使用 &ndash; MSDN</a></li>
</ul>


<p>デバッグモードでビルドした際は以下のようなコマンドでテスト実行ができます。</p>

<p><code>
$ vstest.console.exe TestProject\bin\Debug\TestProject.dll
</code></p>

<p>オプションに関しては公式サイトを。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/jj155796.aspx">VSTest.Console.exe コマンド ライン オプション &ndash; MSDN</a></li>
</ul>


<p>私は<code>/Enablecodecoverage</code>でカバレッジ計測、<code>/Logger:trx</code>で結果を出力しています。</p>

<p>さて、ここでまた注意ですが、やはり<strong>Premium以上のVisual Studioのインストールが必須となります。</strong></p>

<p>FakesはPremium以上がインストールされていないと利用できないんですね&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Git】ブランチを切り替え忘れて作業してしまった時の対処法]]></title>
    <link href="http://vatscy.github.io/blog/2014/03/30/git-branch-stash/"/>
    <updated>2014-03-30T21:28:28+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/03/30/git-branch-stash</id>
    <content type="html"><![CDATA[<p>Git管理されたプロジェクトを更新していてこんな経験はありませんか？</p>

<ul>
<li>ブランチ切らずに作業してしまった！</li>
<li>違うブランチにコミットしてしまった！</li>
</ul>


<p>Git始めたての頃はよくやってました。最近でもたまにあります。</p>

<p>変更をしてしまった後でブランチを切り替えようとすると、場合によってはエラーが出て切り替えられない場合があります。</p>

<p><em>ブランチを切り替えつつ、変更内容も引き継ぎたい！</em></p>

<p>こんな時は次のコマンドを使います。</p>

<!--more-->


<p><code>
$ git stash
</code></p>

<p>このコマンドを使うことで、<strong>コミットされていない変更内容を一時退避</strong>することができます。
この機能を<strong>スタッシュ</strong>といいます。</p>

<p>これを利用して上記問題を解決してみましょう。</p>

<h2>未コミットの変更を引き継ぎつつブランチを変更する</h2>

<p>未コミットの場合は、以下の手順でコマンドを実行します。</p>

<p><code>
$ git stash
$ git checkout &lt;切り替えたいブランチ名&gt;
$ git stash pop
</code></p>

<p><code>$ git stash pop</code>は、直前に一時退避した変更内容を取り出すコマンドです。
変更を一時退避し、ブランチを切り替え、一時退避していた変更を取り出す、という流れです。
ただ、場合によってはコンフリクト（衝突）が発生する可能性があるので、それは自分で対処しましょう。</p>

<p>また、わざわざこの方法を取らなくても、</p>

<p><code>
$ git checkout &lt;切り替えたいブランチ名&gt;
</code></p>

<p>だけで変更内容も引き継げるケースもあります。
まずはチェックアウトを試みて、エラーが出たら上記3コマンドを実行しましょう。</p>

<h2>コミット済みの変更を引き継ぎつつブランチを変更する</h2>

<p>「間違えて違うブランチでコミットしてしまった！」といったケースの対処法です。
この対処法は色々あるのですが、ここではスタッシュを使って対処する方法を紹介します。</p>

<p>要は、<strong>未コミットの状態まで戻せれば、上で紹介した手順が踏める</strong>わけです。</p>

<p>よって、以下のコマンドを実行します。</p>

<p><code>
$ git reset --soft HEAD^
</code></p>

<p>このコマンドは、最新のコミットを取り消して、未コミットの状態に戻すコマンドです。
ちなみに、<code>--soft</code>は「変更内容は残す」という意味で、<code>HEAD^</code>は「直前のコミット」という意味です。
「コミットした」という事実を取り消すだけで、変更内容自体は未コミットの状態で残ります。
この状態に戻して、上記の未コミットの場合の手順を踏めばいいわけです。</p>

<p>簡単ですね(・∀・)</p>

<h2>まとめ</h2>

<p>この記事を通して何が言いたかったかというと、「<strong>スタッシュ便利だよ</strong>」ということですww</p>

<p>今回はブランチ切り替え時のスタッシュの有用性についてまとめました。
しかしそれ以外にもスタッシュは様々な場面で使えるので、スタッシュという機能があるということを覚えておくときっと役に立つはずです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DDD(ドメイン駆動設計)入門してみた]]></title>
    <link href="http://vatscy.github.io/blog/2014/03/08/ddd/"/>
    <updated>2014-03-08T22:53:45+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/03/08/ddd</id>
    <content type="html"><![CDATA[<p>現場に配属されて数ヶ月が経ち、業務にも徐々に慣れてきました。
エンジニアとしての知識もわりとついてきたんじゃないかと思いますが、圧倒的に自分に足りないなと思うのは<strong>設計力</strong>です。</p>

<p>そこで、上司からの薦めもあり、DDD(ドメイン駆動設計)入門してみました。
DDDについて調べた過程、それに対して私が感じたことをまとめてみようと思います。</p>

<!--more-->


<h2>DDD(ドメイン駆動設計)とは</h2>

<p>そもそも、DDDとは何なのか？</p>

<blockquote><p><strong>ドメイン駆動設計(英: Domain-driven design, DDD)</strong>とはソフトウェアの設計手法であり、'複雑なドメインの設計はモデルベースで行うべきであり'、'また大半のソフトウェアプロジェクトではシステムを実装するための特定の技術ではなくドメインそのものとドメインのロジックに焦点を置くべき'とする。この名称は Eric Evans が同名の著作で用いた。<br/>
書籍 Domain-Driven Designでは、たとえば ubiquitous language といった高位の概念と実践について多数述べられている。これは、ドメインモデルがシステムの要求を記述するためにドメインの専門家が提供し、業務上のユーザーやスポンサー、開発者みなにとってうまく働くような common language(共通言語)を形成するべきである、という考えである。同書は多層アーキテクチャを持つオブジェクト指向システムにおいて、一般的なレイヤ構造におけるドメイン層を記述することに重点を置いている。<br/>
(Wikipediaより引用)</p></blockquote>

<p>つまり、「ドメイン」を中心として設計を行うってことでいいのかな？</p>

<p>これだけだとよく分からない&hellip;</p>

<p>そこで、上司にオススメ頂いたサイトがあるので列挙しておく。</p>

<ul>
<li><a href="http://www.ogis-ri.co.jp/otc/hiroba/technical/DDDEssence/">DDD難民に捧げる Domain-Driven Designのエッセンス</a></li>
<li><a href="http://www.infoq.com/jp/minibooks/domain-driven-design-quickly">Domain Driven Design(ドメイン駆動設計) Quickly 日本語版</a></li>
<li><a href="https://www.youtube.com/watch?v=77BTZWq3GiQ">20110409_DevLOVE「実践！　ドメイン駆動設計」_増田亨さん</a></li>
</ul>


<p>1つ目の「エッセンス」は、まさにDDDのエッセンスを簡潔にまとめてあるサイト。このサイトを見れば大まかに「DDDとは何ぞや」が分かります。</p>

<p>2つ目の「Quickly」は、DDDの原著の要約を日本語訳したものを無料ダウンロードできるサイト。無料にも関わらず中身は充実の100ページ弱！ありがたいです。</p>

<p>3つ目の動画は、有限会社システム設計の代表取締役・増田亨さん(<a href="https://twitter.com/masuda220">@masuda220</a>)のDDDの講演動画です。具体例を絡めて非常に分かり易く解説なされています。読書が嫌いな私にとって動画は非常にありがたいw</p>

<p>軽く参考ページを挙げてみましたが、正直全てを隅々まで見ることができていません&hellip;
もう少し時間をかけてゆっくり理解していこうと思います。</p>

<p>ということで、DDDについての解説は私は現状できませんw
もう少し学んでからリベンジしたいと思います。</p>

<h2>気づいたこと</h2>

<p>DDDについて学び始めて気づいたことは、<strong>設計の初歩から始めないと駄目だな</strong>ということです。</p>

<p>例えば、DDDの考え方の基礎となる<em>オブジェクト指向</em>。エンジニアなら誰でも知っていると思います。さすがにポンコツの私ですら知っていますw<br/>
カプセル化、インヘリタンス（継承）、ポリモーフィズム&hellip;説明もできます。</p>

<p>しかし、いざ「オブジェクト指向を基に設計してみよう！」と思っても自信を持って設計できる気がしません&hellip;</p>

<p>なのでまずは<strong>オブジェクト指向設計</strong>から始めてみようと思います。</p>

<p>何か最近、自分に不足していると感じること、学びたいことが沢山ありすぎてつらいですが、広く手を出して浅くなってしまうのは無個性すぎるので、スコープを狭めて深く学び、個性を出していきたい。と言っても基礎が薄いので固めなければならない、という状況で歯がゆい。しばらくは足掻きたいと思います。</p>
]]></content>
  </entry>
  
</feed>
