<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: プログラミング | ばしぶろ]]></title>
  <link href="http://vatscy.github.io/blog/categories/puroguramingu/atom.xml" rel="self"/>
  <link href="http://vatscy.github.io/"/>
  <updated>2014-05-02T21:17:33+09:00</updated>
  <id>http://vatscy.github.io/</id>
  <author>
    <name><![CDATA[ばつしい]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DDD(ドメイン駆動設計)入門してみた]]></title>
    <link href="http://vatscy.github.io/blog/2014/03/08/ddd/"/>
    <updated>2014-03-08T22:53:45+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/03/08/ddd</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/ddd.jpg" alt="DDD" /></p>

<p>現場に配属されて数ヶ月が経ち、業務にも徐々に慣れてきました。
エンジニアとしての知識もわりとついてきたんじゃないかと思いますが、圧倒的に自分に足りないなと思うのは<strong>設計力</strong>です。</p>

<p>そこで、上司からの薦めもあり、DDD(ドメイン駆動設計)入門してみました。
DDDについて調べた過程、それに対して私が感じたことをまとめてみようと思います。</p>

<!--more-->


<h2>DDD(ドメイン駆動設計)とは</h2>

<p>そもそも、DDDとは何なのか？</p>

<blockquote><p><strong>ドメイン駆動設計(英: Domain-driven design, DDD)</strong>とはソフトウェアの設計手法であり、'複雑なドメインの設計はモデルベースで行うべきであり'、'また大半のソフトウェアプロジェクトではシステムを実装するための特定の技術ではなくドメインそのものとドメインのロジックに焦点を置くべき'とする。この名称は Eric Evans が同名の著作で用いた。<br/>
書籍 Domain-Driven Designでは、たとえば ubiquitous language といった高位の概念と実践について多数述べられている。これは、ドメインモデルがシステムの要求を記述するためにドメインの専門家が提供し、業務上のユーザーやスポンサー、開発者みなにとってうまく働くような common language(共通言語)を形成するべきである、という考えである。同書は多層アーキテクチャを持つオブジェクト指向システムにおいて、一般的なレイヤ構造におけるドメイン層を記述することに重点を置いている。<br/>
(Wikipediaより引用)</p></blockquote>

<p>つまり、「ドメイン」を中心として設計を行うってことでいいのかな？</p>

<p>これだけだとよく分からない&hellip;</p>

<p>そこで、上司にオススメ頂いたサイトがあるので列挙しておく。</p>

<ul>
<li><a href="http://www.ogis-ri.co.jp/otc/hiroba/technical/DDDEssence/">DDD難民に捧げる Domain-Driven Designのエッセンス</a></li>
<li><a href="http://www.infoq.com/jp/minibooks/domain-driven-design-quickly">Domain Driven Design(ドメイン駆動設計) Quickly 日本語版</a></li>
<li><a href="https://www.youtube.com/watch?v=77BTZWq3GiQ">20110409_DevLOVE「実践！　ドメイン駆動設計」_増田亨さん</a></li>
</ul>


<p>1つ目の「エッセンス」は、まさにDDDのエッセンスを簡潔にまとめてあるサイト。このサイトを見れば大まかに「DDDとは何ぞや」が分かります。</p>

<p>2つ目の「Quickly」は、DDDの原著の要約を日本語訳したものを無料ダウンロードできるサイト。無料にも関わらず中身は充実の100ページ弱！ありがたいです。</p>

<p>3つ目の動画は、有限会社システム設計の代表取締役・増田亨さん(<a href="https://twitter.com/masuda220">@masuda220</a>)のDDDの講演動画です。具体例を絡めて非常に分かり易く解説なされています。読書が嫌いな私にとって動画は非常にありがたいw</p>

<p>軽く参考ページを挙げてみましたが、正直全てを隅々まで見ることができていません&hellip;
もう少し時間をかけてゆっくり理解していこうと思います。</p>

<p>ということで、DDDについての解説は私は現状できませんw
もう少し学んでからリベンジしたいと思います。</p>

<h2>気づいたこと</h2>

<p>DDDについて学び始めて気づいたことは、<strong>設計の初歩から始めないと駄目だな</strong>ということです。</p>

<p>例えば、DDDの考え方の基礎となる<em>オブジェクト指向</em>。エンジニアなら誰でも知っていると思います。さすがにポンコツの私ですら知っていますw<br/>
カプセル化、インヘリタンス（継承）、ポリモーフィズム&hellip;説明もできます。</p>

<p>しかし、いざ「オブジェクト指向を基に設計してみよう！」と思っても自信を持って設計できる気がしません&hellip;</p>

<p>なのでまずは<strong>オブジェクト指向設計</strong>から始めてみようと思います。</p>

<p>何か最近、自分に不足していると感じること、学びたいことが沢山ありすぎてつらいですが、広く手を出して浅くなってしまうのは無個性すぎるので、スコープを狭めて深く学び、個性を出していきたい。と言っても基礎が薄いので固めなければならない、という状況で歯がゆい。しばらくは足掻きたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ページ読み込み時のJavaScriptの実行タイミング]]></title>
    <link href="http://vatscy.github.io/blog/2014/02/22/document-ready/"/>
    <updated>2014-02-22T12:12:05+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/02/22/document-ready</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/document-ready.jpg" alt="DocumentReady" /></p>

<p>HTMLページを読み込む際のJavaScriptの実行タイミングは色々あります。
タイミングをミスると意図したように動作しないことがあるので注意が必要です。</p>

<p>いくつかパターンを見ていきます。</p>

<!-- more -->


<h2>通常実行</h2>

<p>特に意識せずにJavaScriptを記述したり読み込んだりすると、<strong>書いた順番に処理</strong>されます。</p>

<p>```html
<html>
<head></p>

<pre><code>&lt;title&gt;Title&lt;/title&gt;
&lt;script type="text/javascript" src="main.js"&gt;&lt;/script&gt;
&lt;!-- ↑このタイミングで実行される --&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;script type="text/javascript"&gt;
&lt;!--
var element = document.getElementById("ears");
element.innerHTML = "∧＿＿∧";
// --&gt;
&lt;/script&gt;
&lt;!-- ↑このタイミングで実行される --&gt;

&lt;div id="ears"&gt;&lt;/div&gt;
&lt;div id="face"&gt;&lt;/div&gt;

&lt;script type="text/javascript"&gt;
&lt;!--
var element = document.getElementById("face");
element.innerHTML = "(・∀・)";
// --&gt;
&lt;/script&gt;
&lt;!-- ↑このタイミングで実行される --&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>上記のHTMLを読み込むと、(main.jsの中身は空として)画面には何が表示されるでしょうか？</p>

<p>正解は、</p>

<p>(・∀・)</p>

<p>と表示されます。</p>

<p>耳が表示されないのは
<code>javascript
var element = document.getElementById("ears");
</code>
の時点ではまだ
```html</p>

<div id="ears"></div>


<p>```
が読み込まれておらず、指定できないからです。</p>

<p>ソースの可読性やMVCといった観点から、HTML内に直接JavaScriptを記述するのは好ましくありません(持論)。
なので通常は<code>&lt;head&gt;</code>タグ内で外部JSファイルを読み込む形になると思いますが、
何も意識せずに書くと、上記のような問題が発生します。</p>

<p>そこで、HTMLが読み込まれた<strong>後</strong>にJavaScriptを実行する必要があります。</p>

<h2>読み込み後実行</h2>

<p><a href="http://jquery.com">jQuery</a>を用いて下記のように記述すると、<strong>HTMLが全て読み込まれた後にJavaScriptを実行</strong>できます。
3パターン挙げますが、全て処理は同じです。</p>

<p>```javascript
$(document).ready(function(){</p>

<pre><code>// 読み込み後に実行する処理
</code></pre>

<p>});</p>

<p>$().ready(function(){</p>

<pre><code>// 読み込み後に実行する処理
</code></pre>

<p>});</p>

<p>$(function(){</p>

<pre><code>// 読み込み後に実行する処理
</code></pre>

<p>});
```</p>

<p>個人的には一番下がシンプルで好みです。</p>

<p>これを使って先程のコードを書き直してみると</p>

<p>```html
<html>
<head></p>

<pre><code>&lt;title&gt;Title&lt;/title&gt;
&lt;!-- jQueryの読み込みが必要 --&gt;
&lt;script type="text/javascript" src="lib/jquery/jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="main.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
&lt;!--
$(function() {
    var element = document.getElementById("ears");
    element.innerHTML = "∧＿＿∧";
    element = document.getElementById("face");
    element.innerHTML = "(・∀・)";
});
// --&gt;
&lt;/script&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;div id="ears"&gt;&lt;/div&gt;
&lt;div id="face"&gt;&lt;/div&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>処理の記述は<code>&lt;div&gt;</code>より先ですが、HTMLが読み込まれた後に実行されるので、表示結果は</p>

<p>∧＿＿∧<br/>
(・∀・)</p>

<p>となります。（ずれてるけど）</p>

<h2>完全読み込み後実行</h2>

<p>HTMLだけでなく、<strong>全ての関連ファイルを読み込んだ後に実行</strong>する処理を書くこともできます。</p>

<p>```javascript
document.onload = function() {</p>

<pre><code>// 完全読み込み後に実行する処理
</code></pre>

<p>}
```</p>

<p>場合によって上手く使い分けましょう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Markdown】記法まとめ]]></title>
    <link href="http://vatscy.github.io/blog/2013/12/23/markdown-matome/"/>
    <updated>2013-12-23T20:31:26+09:00</updated>
    <id>http://vatscy.github.io/blog/2013/12/23/markdown-matome</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/markdown.jpg" alt="Markdown" /></p>

<p>今回は<strong>Markdown</strong>についてまとめてみます。</p>

<h2>Markdownとは</h2>

<blockquote><p>Markdown は、文書を記述するための軽量マークアップ言語のひとつである。(<a href="http://ja.wikipedia.org/wiki/Markdown" target="_blank">Wikipedia</a>より引用)</p></blockquote>

<p>つまり、テキストに構造をつける言語です。</p>

<p>ちなみにこのブログもMarkdownで記述されています。</p>

<p>これからブログを書いていく上でまとめておいた方が良さそうだったのでまとめてみます。</p>

<p>(要は自分のため)</p>

<!-- more -->


<h2>記法</h2>

<h3>見出し</h3>

<p>HTMLにおける<code>&lt;h1&gt;</code>〜<code>&lt;h6&gt;</code>。<br/>
<strong>#の数</strong>で区別します。</p>

<h4>(例)</h4>

<h1>h1</h1>

<pre><code># h1
</code></pre>

<h2>h2</h2>

<pre><code>## h2
</code></pre>

<h3>h3</h3>

<pre><code>### h3
</code></pre>

<h4>h4</h4>

<pre><code>#### h4
</code></pre>

<h5>h5</h5>

<pre><code>##### h5
</code></pre>

<h6>h6</h6>

<pre><code>###### h6
</code></pre>

<h3>改行</h3>

<p>HTMLにおける<code>&lt;br&gt;</code>。<br/>
<strong>行末に半角スペースを2個以上記述する</strong>ことで実現します。<br/>
ただ改行を入れるだけでは反映されないので注意！</p>

<h3>段落</h3>

<p>HTMLにおける<code>&lt;p&gt;</code>。<br/>
<strong>空行を挟む</strong>ことで段落分けします。<br/>
空行を挟まない改行は反映されないので注意！</p>

<h4>(例)</h4>

<p>さすがディオ!
俺達に出来ないことを平然とやってのけるッ!</p>

<p>そこにシビれる!
あこがれるゥ!</p>

<pre><code>さすがディオ!
俺達に出来ないことを平然とやってのけるッ!

そこにシビれる!
あこがれるゥ!
</code></pre>

<h3>強調</h3>

<p>HTMLにおける<code>&lt;em&gt;</code>と<code>&lt;strong&gt;</code>。<br/>
<code>&lt;em&gt;</code>は * または _ で囲み、<code>&lt;strong&gt;</code>は ** または __ で囲みます。<br/>
ちなみに、<code>&lt;em&gt;</code>より<code>&lt;strong&gt;</code>の方が強い強調を表します。</p>

<h4>(例)</h4>

<p><em>ウボォーさん</em>、聞こえますか？オレ達から貴方への<strong>鎮魂歌</strong>です</p>

<pre><code>*ウボォーさん*、聞こえますか？オレ達から貴方への**鎮魂歌**です
</code></pre>

<h3>コード</h3>

<p>HTMLにおける<code>&lt;code&gt;</code>。<br/>
先程から使っている<code>これ</code>や</p>

<pre><code>これ
</code></pre>

<p>です。<br/>
インライン(1つ目)の場合は<strong> ｀(グレイヴアクセント) で囲み</strong>ます。<br/>
段落(2つ目)の場合は<strong>行頭にTabを挿入</strong>、または<strong> ｀(グレイヴアクセント)3つで行を囲み</strong>ます。</p>

<h4>(例)</h4>

<p><code>``
</code>インライン`</p>

<pre><code>Tab
</code></pre>

<p> <code>
 グレイヴアクセント囲み
</code>
```</p>

<h3>順序無しリスト</h3>

<p>HTMLにおける<code>&lt;ul&gt;&lt;li&gt;</code>。<br/>
行頭に<strong> (* + &ndash; のうちのどれか1つ) ＋ 半角スペース</strong>を挿入することで実現します。<br/>
また、さらに<strong>行頭に半角スペース4つを入れる</strong>ことでサブアイテムを作ることもできます。</p>

<h4>(例)</h4>

<ul>
<li>強化系

<ul>
<li>ゴン</li>
</ul>
</li>
<li>変化形

<ul>
<li>キルア</li>
</ul>
</li>
<li>具現化形

<ul>
<li>クラピカ</li>
</ul>
</li>
<li>操作系</li>
<li>放出系

<ul>
<li>レオリオ</li>
</ul>
</li>
<li>特質形</li>
</ul>


<p>```
* 強化系</p>

<pre><code>+ ゴン
</code></pre>

<ul>
<li>変化形

<ul>
<li>キルア</li>
</ul>
</li>
<li>具現化形

<ul>
<li>クラピカ</li>
</ul>
</li>
<li>操作系</li>
<li>放出系

<ul>
<li>レオリオ</li>
</ul>
</li>
<li>特質形
```</li>
</ul>


<h3>順序付きリスト</h3>

<p>HTMLにおける<code>&lt;ol&gt;&lt;li&gt;</code>。<br/>
行頭に<strong>数字 ＋ ピリオド</strong>を挿入することで実現します。</p>

<h4>(例)</h4>

<ol>
<li>ファントムブラッド</li>
<li>戦闘潮流</li>
<li>スターダストクルセイダーズ</li>
</ol>


<p><code>
1. ファントムブラッド
2. 戦闘潮流
3. スターダストクルセイダーズ
</code></p>

<h3>引用</h3>

<p>HTMLにおける<code>&lt;blockquote&gt;</code>、<code>&lt;q&gt;</code>、<code>&lt;cite&gt;</code>。<br/>
行頭に<strong> > ＋ 半角スペース</strong>を挿入することで実現します。</p>

<h4>(例)</h4>

<blockquote><p>恐ろしく速い手刀 オレでなきゃ見逃しちゃうね<br/>
(by 団長の手刀を見逃さなかった人 &ndash; HUNTER×HUNTER11巻より抜粋)</p></blockquote>

<p>```</p>

<blockquote><p>恐ろしく速い手刀 オレでなきゃ見逃しちゃうね<br/>
(by 団長の手刀を見逃さなかった人 &ndash; HUNTER×HUNTER11巻より抜粋)
```</p></blockquote>

<h3>水平線</h3>

<p>HTMLにおける<code>&lt;hr&gt;</code>。<br/>
1行の中に<strong> &ndash; (ハイフン)、 * (アスタリスク)、 _ (アンダースコア)のうちどれか1種を3個以上並べる</strong>ことで実現します。
間に半角スペースを挟んでもOKです。</p>

<h4>(例)</h4>

<hr />

<h2>```</h2>

<hr />

<hr />

<p>```</p>

<h3>テーブル</h3>

<p>HTMLにおける<code>&lt;table&gt;</code>。</p>

<h4>(例)</h4>

<table>
<thead>
<tr>
<th align="left">左寄せ </th>
<th align="center"> 中央寄せ </th>
<th align="right"> 右寄せ</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">左に </td>
<td align="center"> 中央に </td>
<td align="right"> 右に</td>
</tr>
<tr>
<td align="left">受け流すスタイル </td>
<td align="center"> 居座るスタイル </td>
<td align="right"> 寄せていくスタイル</td>
</tr>
<tr>
<td align="left">on </td>
<td align="center"> on </td>
<td align="right"> on</td>
</tr>
<tr>
<td align="left">the </td>
<td align="center"> the </td>
<td align="right"> the</td>
</tr>
<tr>
<td align="left">left </td>
<td align="center"> center </td>
<td align="right"> right</td>
</tr>
</tbody>
</table>


<p><code>
左寄せ | 中央寄せ | 右寄せ
:-----|:----:|-----:
左に | 中央に | 右に
受け流すスタイル | 居座るスタイル | 寄せていくスタイル
on | on | on
the | the | the
left | center | right
</code></p>

<h3>リンク</h3>

<p>HTMLにおける<code>&lt;a&gt;</code>。<br/>
<code>[リンクのテキスト](URL "タイトル")</code> の形式で実現します。</p>

<h4>(例)</h4>

<p><a href="http://www.geocities.jp/yuusuke4971/" title="かの有名なサイト">ゆうすけのホームページ</a></p>

<pre><code>[ゆうすけのホームページ](http://www.geocities.jp/yuusuke4971/ "かの有名なサイト")
</code></pre>

<hr />

<p>また、リンクの情報を一カ所にまとめておいて、<br/>
実際にリンクを貼る場所でその情報を持ってくることもできます。</p>

<h4>(例)</h4>

<p><a href="http://www.google.co.jp" title="ごおgれ">Google</a><br/>
<a href="http://www.yahoo.co.jp" title="やほお">Yahoo!</a></p>

<p>```
<a href="http://www.google.co.jp" title="ごおgれ">Google</a><br/>
<a href="http://www.yahoo.co.jp" title="やほお">Yahoo!</a></p>

<p>```</p>

<h3>画像</h3>

<p>HTMLにおける<code>&lt;img&gt;</code>。<br/>
<code>![画像の説明文](画像URL)</code> の形式で実現します。</p>

<h4>(例)</h4>

<p><img src="http://vatscy.github.io/images/post/YMD68_TKG500.jpg" alt="そんな好きじゃない" /></p>

<pre><code>![そんな好きじゃない](http://vatscy.github.io/images/post/YMD68_TKG500.jpg)
</code></pre>

<h3>その他</h3>

<ul>
<li>半角バックスラッシュまたは半角￥をMarkdownの直前に挿入することでエスケープ可能。</li>
<li>HTMLタグを直接記述することも可能。複雑な処理はHTMLタグで書こう。</li>
<li>GitHubでは<a href="https://help.github.com/articles/github-flavored-markdown" title="GFM">GitHub Flavored Markdown</a>というアレンジされたMarkdownが使われているので、専用の文法が存在する。</li>
</ul>

]]></content>
  </entry>
  
</feed>
