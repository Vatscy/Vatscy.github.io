<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: プログラミング | ばしぶろ]]></title>
  <link href="http://vatscy.github.io/blog/categories/puroguramingu/atom.xml" rel="self"/>
  <link href="http://vatscy.github.io/"/>
  <updated>2014-05-17T23:07:35+09:00</updated>
  <id>http://vatscy.github.io/</id>
  <author>
    <name><![CDATA[ばつしい]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[正規表現を解析して可視化してくれるサイトが凄すぎる件]]></title>
    <link href="http://vatscy.github.io/blog/2014/05/17/regexper/"/>
    <updated>2014-05-17T08:10:37+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/05/17/regexper</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/regexper1.jpg" alt="regexper" /></p>

<p>ある正規表現に対して、特定の文字列がマッチするかどうかをチェックするツールやサイトは沢山ありますが、<em>正規表現そのものが何を意味しているのか、どんな文字列を期待しているのか</em>を解析・解読・説明してくれるツールやサイトってなかなか見ない気がします。</p>

<p>僕は馬鹿なので正規表現を見ても何が何だかさっぱりわかりません。<br/>
例えばこれ。</p>

<p><code>
^[a-zA-Z0-9-_.]@([a-zA-Z0-9_-]+\.)+[a-zA-Z]{2,4}$
</code></p>

<p>いつかはマスターしたいけど&hellip;今は楽したい。<br/>
そう思ってググってみると&hellip;ありました！</p>

<!--more-->


<p>それがこちら。</p>

<ul>
<li><a href="http://www.regexper.com/">Regexper</a></li>
</ul>


<p>正規表現を入力して Display をクリックすると、その正規表現が表す内容を図にして表示してくれます。</p>

<p>例えば先程の正規表現は、当記事の一番上の画像のように表示されます。<br/>
これはメールアドレスを判定する簡易的な正規表現です。</p>

<h2>使ってみる</h2>

<p>こちらの正規表現を試してみましょう。</p>

<p><code>
(^(?!090|080|070)(^\d{2,5}?\-\d{1,4}?\-\d{4}$|^[\d\-]{12}$))|(^(090|080|070)(\-\d{4}\-\d{4}|[\d-]{13})$)|(^0120(\-\d{2,3}\-\d{3,4}|[\d\-]{12})$)|(^0080\-\d{3}\-\d{4})
</code></p>

<p><code>090</code>とか<code>080</code>とかあるので電話番号の正規表現です。</p>

<ul>
<li>フォームに正規表現を入力</li>
</ul>


<p><img src="http://vatscy.github.io/images/post/regexper2.jpg" alt="regexper" /></p>

<ul>
<li>Displayをクリックすると図が表示される</li>
</ul>


<p><img src="http://vatscy.github.io/images/post/regexper3.jpg" alt="regexper" /></p>

<p>見方としては、左から線をたどっていって、分岐があれば好きな方に行ける。
最終的に一番右に到達するまでに出てきた文字をつなげたような文字列を期待しています。
(解説下手だけどこの記事を読んでる人ならわかると信じたい)</p>

<p>簡単でわかりやすい！</p>

<p>GitHubで開発しているみたいです。こんなサイトを作りたいなぁ&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C#】Fakesを使った単体テストをCUIでビルド・テスト実行する方法]]></title>
    <link href="http://vatscy.github.io/blog/2014/05/02/build-fakes/"/>
    <updated>2014-05-02T18:52:01+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/05/02/build-fakes</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/build-fakes.jpg" alt="BuildFakes" /></p>

<p>私は普段Visual Studio 2013 Premiumを使って開発を行なっています。</p>

<p>単体テストを書く際に、モックライブラリとしてPremium以上で利用できる「<strong>Fakes</strong>」を使っています。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/hh549175.aspx">Microsoft Fakes を使用したテストでのコードの分離 &ndash; MSDN</a></li>
</ul>


<p>Fakesを使って単体テストを書いていて、そのプロジェクトをJenkinsでビルド・テスト実行しようとした際に少しハマったのでまとめておきます。</p>

<!-- more -->


<h2>MSBuildでビルドする</h2>

<p>C#のプロジェクトをビルドする時には<strong>MSBuild</strong>を使います。</p>

<p>Fakesを導入するとビルド時に必要なモックライブラリを生成してくれます。</p>

<p>この時、<strong>Visual StudioのPremium以上がインストールされていないと自動生成されずビルドに失敗してしまいます。</strong></p>

<p>開発している環境と、Jenkinsを置いている環境が異なる場合は注意が必要です。
私の場合JenkinsサーバにはPremium以上がインストールされていなかったのでこれでハマりました。</p>

<h2>vstest.consoleで単体テストを実行する</h2>

<p>MSTestにFakesを導入して記述した単体テストをコマンドプロンプトから実行します。</p>

<p>この時<em>MSTest.exe</em>では上手く実行できませんでした。
テストの実行自体はできるのですが、Fakesを使っているテストが失敗してしまいます。</p>

<p>そこで使用するのが、<strong>vstest.console.exe</strong>という実行ファイルです。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/jj155800.aspx">コマンド ラインからの VSTest.Console の使用 &ndash; MSDN</a></li>
</ul>


<p>デバッグモードでビルドした際は以下のようなコマンドでテスト実行ができます。</p>

<p><code>
$ vstest.console.exe TestProject\bin\Debug\TestProject.dll
</code></p>

<p>オプションに関しては公式サイトを。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/jj155796.aspx">VSTest.Console.exe コマンド ライン オプション &ndash; MSDN</a></li>
</ul>


<p>私は<code>/Enablecodecoverage</code>でカバレッジ計測、<code>/Logger:trx</code>で結果を出力しています。</p>

<p>さて、ここでまた注意ですが、やはり<strong>Premium以上のVisual Studioのインストールが必須となります。</strong></p>

<p>FakesはPremium以上がインストールされていないと利用できないんですね&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Git】ブランチを切り替え忘れて作業してしまった時の対処法]]></title>
    <link href="http://vatscy.github.io/blog/2014/03/30/git-branch-stash/"/>
    <updated>2014-03-30T21:28:28+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/03/30/git-branch-stash</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/git-stash.jpg" alt="GitStash" /></p>

<p>Git管理されたプロジェクトを更新していてこんな経験はありませんか？</p>

<ul>
<li>ブランチ切らずに作業してしまった！</li>
<li>違うブランチにコミットしてしまった！</li>
</ul>


<p>Git始めたての頃はよくやってました。最近でもたまにあります。</p>

<p>変更をしてしまった後でブランチを切り替えようとすると、場合によってはエラーが出て切り替えられない場合があります。</p>

<p><em>ブランチを切り替えつつ、変更内容も引き継ぎたい！</em></p>

<p>こんな時は次のコマンドを使います。</p>

<!--more-->


<p><code>
$ git stash
</code></p>

<p>このコマンドを使うことで、<strong>コミットされていない変更内容を一時退避</strong>することができます。
この機能を<strong>スタッシュ</strong>といいます。</p>

<p>これを利用して上記問題を解決してみましょう。</p>

<h2>未コミットの変更を引き継ぎつつブランチを変更する</h2>

<p>未コミットの場合は、以下の手順でコマンドを実行します。</p>

<p><code>
$ git stash
$ git checkout &lt;切り替えたいブランチ名&gt;
$ git stash pop
</code></p>

<p><code>$ git stash pop</code>は、直前に一時退避した変更内容を取り出すコマンドです。
変更を一時退避し、ブランチを切り替え、一時退避していた変更を取り出す、という流れです。
ただ、場合によってはコンフリクト（衝突）が発生する可能性があるので、それは自分で対処しましょう。</p>

<p>また、わざわざこの方法を取らなくても、</p>

<p><code>
$ git checkout &lt;切り替えたいブランチ名&gt;
</code></p>

<p>だけで変更内容も引き継げるケースもあります。
まずはチェックアウトを試みて、エラーが出たら上記3コマンドを実行しましょう。</p>

<h2>コミット済みの変更を引き継ぎつつブランチを変更する</h2>

<p>「間違えて違うブランチでコミットしてしまった！」といったケースの対処法です。
この対処法は色々あるのですが、ここではスタッシュを使って対処する方法を紹介します。</p>

<p>要は、<strong>未コミットの状態まで戻せれば、上で紹介した手順が踏める</strong>わけです。</p>

<p>よって、以下のコマンドを実行します。</p>

<p><code>
$ git reset --soft HEAD^
</code></p>

<p>このコマンドは、最新のコミットを取り消して、未コミットの状態に戻すコマンドです。
ちなみに、<code>--soft</code>は「変更内容は残す」という意味で、<code>HEAD^</code>は「直前のコミット」という意味です。
「コミットした」という事実を取り消すだけで、変更内容自体は未コミットの状態で残ります。
この状態に戻して、上記の未コミットの場合の手順を踏めばいいわけです。</p>

<p>簡単ですね(・∀・)</p>

<h2>まとめ</h2>

<p>この記事を通して何が言いたかったかというと、「<strong>スタッシュ便利だよ</strong>」ということですww</p>

<p>今回はブランチ切り替え時のスタッシュの有用性についてまとめました。
しかしそれ以外にもスタッシュは様々な場面で使えるので、スタッシュという機能があるということを覚えておくときっと役に立つはずです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DDD(ドメイン駆動設計)入門してみた]]></title>
    <link href="http://vatscy.github.io/blog/2014/03/08/ddd/"/>
    <updated>2014-03-08T22:53:45+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/03/08/ddd</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/ddd.jpg" alt="DDD" /></p>

<p>現場に配属されて数ヶ月が経ち、業務にも徐々に慣れてきました。
エンジニアとしての知識もわりとついてきたんじゃないかと思いますが、圧倒的に自分に足りないなと思うのは<strong>設計力</strong>です。</p>

<p>そこで、上司からの薦めもあり、DDD(ドメイン駆動設計)入門してみました。
DDDについて調べた過程、それに対して私が感じたことをまとめてみようと思います。</p>

<!--more-->


<h2>DDD(ドメイン駆動設計)とは</h2>

<p>そもそも、DDDとは何なのか？</p>

<blockquote><p><strong>ドメイン駆動設計(英: Domain-driven design, DDD)</strong>とはソフトウェアの設計手法であり、'複雑なドメインの設計はモデルベースで行うべきであり'、'また大半のソフトウェアプロジェクトではシステムを実装するための特定の技術ではなくドメインそのものとドメインのロジックに焦点を置くべき'とする。この名称は Eric Evans が同名の著作で用いた。<br/>
書籍 Domain-Driven Designでは、たとえば ubiquitous language といった高位の概念と実践について多数述べられている。これは、ドメインモデルがシステムの要求を記述するためにドメインの専門家が提供し、業務上のユーザーやスポンサー、開発者みなにとってうまく働くような common language(共通言語)を形成するべきである、という考えである。同書は多層アーキテクチャを持つオブジェクト指向システムにおいて、一般的なレイヤ構造におけるドメイン層を記述することに重点を置いている。<br/>
(Wikipediaより引用)</p></blockquote>

<p>つまり、「ドメイン」を中心として設計を行うってことでいいのかな？</p>

<p>これだけだとよく分からない&hellip;</p>

<p>そこで、上司にオススメ頂いたサイトがあるので列挙しておく。</p>

<ul>
<li><a href="http://www.ogis-ri.co.jp/otc/hiroba/technical/DDDEssence/">DDD難民に捧げる Domain-Driven Designのエッセンス</a></li>
<li><a href="http://www.infoq.com/jp/minibooks/domain-driven-design-quickly">Domain Driven Design(ドメイン駆動設計) Quickly 日本語版</a></li>
<li><a href="https://www.youtube.com/watch?v=77BTZWq3GiQ">20110409_DevLOVE「実践！　ドメイン駆動設計」_増田亨さん</a></li>
</ul>


<p>1つ目の「エッセンス」は、まさにDDDのエッセンスを簡潔にまとめてあるサイト。このサイトを見れば大まかに「DDDとは何ぞや」が分かります。</p>

<p>2つ目の「Quickly」は、DDDの原著の要約を日本語訳したものを無料ダウンロードできるサイト。無料にも関わらず中身は充実の100ページ弱！ありがたいです。</p>

<p>3つ目の動画は、有限会社システム設計の代表取締役・増田亨さん(<a href="https://twitter.com/masuda220">@masuda220</a>)のDDDの講演動画です。具体例を絡めて非常に分かり易く解説なされています。読書が嫌いな私にとって動画は非常にありがたいw</p>

<p>軽く参考ページを挙げてみましたが、正直全てを隅々まで見ることができていません&hellip;
もう少し時間をかけてゆっくり理解していこうと思います。</p>

<p>ということで、DDDについての解説は私は現状できませんw
もう少し学んでからリベンジしたいと思います。</p>

<h2>気づいたこと</h2>

<p>DDDについて学び始めて気づいたことは、<strong>設計の初歩から始めないと駄目だな</strong>ということです。</p>

<p>例えば、DDDの考え方の基礎となる<em>オブジェクト指向</em>。エンジニアなら誰でも知っていると思います。さすがにポンコツの私ですら知っていますw<br/>
カプセル化、インヘリタンス（継承）、ポリモーフィズム&hellip;説明もできます。</p>

<p>しかし、いざ「オブジェクト指向を基に設計してみよう！」と思っても自信を持って設計できる気がしません&hellip;</p>

<p>なのでまずは<strong>オブジェクト指向設計</strong>から始めてみようと思います。</p>

<p>何か最近、自分に不足していると感じること、学びたいことが沢山ありすぎてつらいですが、広く手を出して浅くなってしまうのは無個性すぎるので、スコープを狭めて深く学び、個性を出していきたい。と言っても基礎が薄いので固めなければならない、という状況で歯がゆい。しばらくは足掻きたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ページ読み込み時のJavaScriptの実行タイミング]]></title>
    <link href="http://vatscy.github.io/blog/2014/02/22/document-ready/"/>
    <updated>2014-02-22T12:12:05+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/02/22/document-ready</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/document-ready.jpg" alt="DocumentReady" /></p>

<p>HTMLページを読み込む際のJavaScriptの実行タイミングは色々あります。
タイミングをミスると意図したように動作しないことがあるので注意が必要です。</p>

<p>いくつかパターンを見ていきます。</p>

<!-- more -->


<h2>通常実行</h2>

<p>特に意識せずにJavaScriptを記述したり読み込んだりすると、<strong>書いた順番に処理</strong>されます。</p>

<p>```html
<html>
<head></p>

<pre><code>&lt;title&gt;Title&lt;/title&gt;
&lt;script type="text/javascript" src="main.js"&gt;&lt;/script&gt;
&lt;!-- ↑このタイミングで実行される --&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;script type="text/javascript"&gt;
&lt;!--
var element = document.getElementById("ears");
element.innerHTML = "∧＿＿∧";
// --&gt;
&lt;/script&gt;
&lt;!-- ↑このタイミングで実行される --&gt;

&lt;div id="ears"&gt;&lt;/div&gt;
&lt;div id="face"&gt;&lt;/div&gt;

&lt;script type="text/javascript"&gt;
&lt;!--
var element = document.getElementById("face");
element.innerHTML = "(・∀・)";
// --&gt;
&lt;/script&gt;
&lt;!-- ↑このタイミングで実行される --&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>上記のHTMLを読み込むと、(main.jsの中身は空として)画面には何が表示されるでしょうか？</p>

<p>正解は、</p>

<p>(・∀・)</p>

<p>と表示されます。</p>

<p>耳が表示されないのは
<code>javascript
var element = document.getElementById("ears");
</code>
の時点ではまだ
```html</p>

<div id="ears"></div>


<p>```
が読み込まれておらず、指定できないからです。</p>

<p>ソースの可読性やMVCといった観点から、HTML内に直接JavaScriptを記述するのは好ましくありません(持論)。
なので通常は<code>&lt;head&gt;</code>タグ内で外部JSファイルを読み込む形になると思いますが、
何も意識せずに書くと、上記のような問題が発生します。</p>

<p>そこで、HTMLが読み込まれた<strong>後</strong>にJavaScriptを実行する必要があります。</p>

<h2>読み込み後実行</h2>

<p><a href="http://jquery.com">jQuery</a>を用いて下記のように記述すると、<strong>HTMLが全て読み込まれた後にJavaScriptを実行</strong>できます。
3パターン挙げますが、全て処理は同じです。</p>

<p>```javascript
$(document).ready(function(){</p>

<pre><code>// 読み込み後に実行する処理
</code></pre>

<p>});</p>

<p>$().ready(function(){</p>

<pre><code>// 読み込み後に実行する処理
</code></pre>

<p>});</p>

<p>$(function(){</p>

<pre><code>// 読み込み後に実行する処理
</code></pre>

<p>});
```</p>

<p>個人的には一番下がシンプルで好みです。</p>

<p>これを使って先程のコードを書き直してみると</p>

<p>```html
<html>
<head></p>

<pre><code>&lt;title&gt;Title&lt;/title&gt;
&lt;!-- jQueryの読み込みが必要 --&gt;
&lt;script type="text/javascript" src="lib/jquery/jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="main.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
&lt;!--
$(function() {
    var element = document.getElementById("ears");
    element.innerHTML = "∧＿＿∧";
    element = document.getElementById("face");
    element.innerHTML = "(・∀・)";
});
// --&gt;
&lt;/script&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;div id="ears"&gt;&lt;/div&gt;
&lt;div id="face"&gt;&lt;/div&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>処理の記述は<code>&lt;div&gt;</code>より先ですが、HTMLが読み込まれた後に実行されるので、表示結果は</p>

<p>∧＿＿∧<br/>
(・∀・)</p>

<p>となります。（ずれてるけど）</p>

<h2>完全読み込み後実行</h2>

<p>HTMLだけでなく、<strong>全ての関連ファイルを読み込んだ後に実行</strong>する処理を書くこともできます。</p>

<p>```javascript
document.onload = function() {</p>

<pre><code>// 完全読み込み後に実行する処理
</code></pre>

<p>}
```</p>

<p>場合によって上手く使い分けましょう！</p>
]]></content>
  </entry>
  
</feed>
