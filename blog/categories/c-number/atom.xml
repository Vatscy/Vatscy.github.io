<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C# | ばしぶろ]]></title>
  <link href="http://vatscy.github.io/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://vatscy.github.io/"/>
  <updated>2014-06-14T02:57:13+09:00</updated>
  <id>http://vatscy.github.io/</id>
  <author>
    <name><![CDATA[ばつしい]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【ASP.NET】APIのルーティングを設定する2つの方法【WebAPI】]]></title>
    <link href="http://vatscy.github.io/blog/2014/06/08/api-routing/"/>
    <updated>2014-06-08T22:31:27+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/06/08/api-routing</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/api-routing.jpg" alt="WebAPI" /></p>

<p>ASP.NET Web APIでルーティングを行う方法は大きく分けて以下の2つです。<br/>
(私が知る限りでは)</p>

<ol>
<li>WebApiConfigで一括定義する</li>
<li>Attributeを付与して個別定義する</li>
</ol>


<p>今回はその2つの方法について解説していきます。</p>

<!-- more -->


<h2>そもそもルーティングとは</h2>

<p>ASP.NET Web APIは、その名の通りAPIを提供するためのフレームワークです。<br/>
実装としては、Controllerクラスを作り、その中にメソッドを定義します。<br/>
基本的にはメソッド1つに対してAPI1本が対応します。</p>

<p>ルーティングとは、あるURLにリクエストが来たときにどのAPIを呼び出すか、すなわち、<strong>リクエストURLと、呼び出すメソッドを結びつけること</strong>です。</p>

<h2>方法1: WebApiConfigで一括定義する</h2>

<p>ASP.NET Web APIのプロジェクトを新規作成した場合、このルーティング方法がデフォルトで採用されていると思います。</p>

<p>WebApiConfig.csで以下のように定義します。
```csharp
public static class WebApiConfig
{</p>

<pre><code>public static void Register(HttpConfiguration config)
{
    config.Routes.MapHttpRoute(
        name: "DefaultApi",
        routeTemplate: "api/{controller}/{action}/{id}",
        defaults: new { id = RouteParameter.Optional }
    );
}
</code></pre>

<p>}
<code>``
Registerというメソッド内でconfigにルーティングを追加します。  
例えば上記の例だと、</code><a href="http://sample.jp/api/profile/get/5">http://sample.jp/api/profile/get/5</a><code>というURLをコールすると、**ProfileController**の**Get**メソッドが呼び出されます。  
</code>{controller}<code>の部分がコントローラ名、</code>{action}<code>の部分がメソッド名に対応するわけです。  
ちなみに</code>config.Routes.MapHttpRoute`を複数回呼び出すことで規則を複数定義することができます。その場合、先に定義した規則が優先して適用されます。</p>

<p>メソッドの実装はこちら。</p>

<p>```csharp
public class ProfileController : ApiController
{</p>

<pre><code>[HttpGet]
public HttpResponseMessage Get(int id)
{
    ... 
}
</code></pre>

<p>}
```</p>

<p>ルーティング設定に含まれている<code>id</code>は何かというと、メソッドに渡すパラメータです。<br/>
メソッドで上記のようにパラメータを受け取るように定義しておけば、URLの<code>{id}</code>の部分に指定した値を受け取ることができます。</p>

<p>ルーティング設定の中の
<code>
defaults: new { id = RouteParameter.Optional }
</code>
は、ルーティング時のデフォルト値の設定になります。<br/>
<code>RouteParameter.Optional</code>は「<em>このパラメータは省略可能である</em>」ことを意味します。<br/>
つまり<code>{id}</code>はあってもなくてもいいという意味です。</p>

<p>ちなみにデフォルトとして以下のように設定することもできます。
<code>
defaults: new { controller = "profile", action = "get", id = RouteParameter.Optional }
</code>
このように設定すると、<code>{controller}</code>や<code>{action}</code>を省略することが可能になります。<br/>
つまり<code>http://sample.jp/api/</code>というURLでアクセスすると勝手にProfileControllerのGetメソッドが呼ばれるわけです。</p>

<h3>アクション名を指定する</h3>

<p>例えば、「<strong>メソッド名は具体的に記述する</strong>」というチームルールがあったとします。<br/>
しかし、例えば以下のようなメソッドがあったとします。
```csharp
public class ProfileController : ApiController
{</p>

<pre><code>[HttpGet]
public HttpResponseMessage FindProfileByConsumerId(int id)
{
    ... 
}
</code></pre>

<p>}
<code>``
このとき、APIのURLは</code><a href="http://sample.jp/api/profile/findProfileByConsumerId/5">http://sample.jp/api/profile/findProfileByConsumerId/5</a>`となってしまいます。長い&hellip;</p>

<p>これを回避するために、ルーティングする文字列を別に指定することができます。<br/>
以下のように<code>ActionName</code>属性をメソッドに付与します。
```csharp
[HttpGet]
[ActionName(&ldquo;get&rdquo;)]
public HttpResponseMessage FindProfileByConsumerId(int id)
{</p>

<pre><code>... 
</code></pre>

<p>}
<code>``
こうすると</code><a href="http://sample.jp/api/profile/get/5">http://sample.jp/api/profile/get/5</a><code>というURLで、  
</code>FindProfileByConsumerId`メソッドを呼び出すことができます。</p>

<h2>方法2: Attributeを付与して個別定義する</h2>

<p>この方法は<strong>全てのメソッドにルーティング方法を明記する</strong>方法です。</p>

<p>まずWebApiConfig.csで以下のように宣言します。
```csharp
public static class WebApiConfig
{</p>

<pre><code>public static void Register(HttpConfiguration config)
{
    config.MapHttpAttributeRoutes();
}
</code></pre>

<p>}
```</p>

<p>次にメソッドに<code>Route</code>属性を付与します。
```csharp
public class ProfileController : ApiController
{</p>

<pre><code>[HttpGet]
[Route("api/profile/{id}")]
public HttpResponseMessage FindProfileByConsumerId(int id)
{
    ... 
}
</code></pre>

<p>}
<code>``
このように定義すると、</code><a href="http://sample.jp/api/profile/5">http://sample.jp/api/profile/5</a>`に対してこのメソッドが呼ばれるようになります。</p>

<p>APIを複数実装(メソッドを追加)する場合は必ず<code>Route</code>属性を付与します。
```csharp
public class ProfileController : ApiController
{</p>

<pre><code>[HttpGet]
[Route("api/profile/{id}")]
public HttpResponseMessage FindProfileByConsumerId(int id)
{
    ... 
}

[HttpPost]
[Route("api/profile/update")]
public void UpdateConsumerProfile(Profile profile)
{
    ...
}
</code></pre>

<p>}
<code>
ただ、上のように毎回`api/profile/`の部分を書いていくのは面倒だしメンテナンスしづらい。  
そういった場合は`RoutePrefix`属性で共通化します。
</code>csharp
[RoutePrefix(&ldquo;api/profile&rdquo;)]
public class ProfileController : ApiController
{</p>

<pre><code>[HttpGet]
[Route("{id}")]
public HttpResponseMessage FindProfileByConsumerId(int id)
{
    ... 
}

[HttpPost]
[Route("update")]
public void UpdateConsumerProfile(Profile profile)
{
    ...
}
</code></pre>

<p>}
```</p>

<h2>まとめ</h2>

<p>ルーティングする際には基本的には上で説明した2パターンのどちらかを採用するのがいいかなー、と思います。</p>

<p>ちなみに上記2パターンを併用することもできます。そこはお好みで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【C#】Fakesを使った単体テストをCUIでビルド・テスト実行する方法]]></title>
    <link href="http://vatscy.github.io/blog/2014/05/02/build-fakes/"/>
    <updated>2014-05-02T18:52:01+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/05/02/build-fakes</id>
    <content type="html"><![CDATA[<p><img src="http://vatscy.github.io/images/post/build-fakes.jpg" alt="BuildFakes" /></p>

<p>私は普段Visual Studio 2013 Premiumを使って開発を行なっています。</p>

<p>単体テストを書く際に、モックライブラリとしてPremium以上で利用できる「<strong>Fakes</strong>」を使っています。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/hh549175.aspx">Microsoft Fakes を使用したテストでのコードの分離 &ndash; MSDN</a></li>
</ul>


<p>Fakesを使って単体テストを書いていて、そのプロジェクトをJenkinsでビルド・テスト実行しようとした際に少しハマったのでまとめておきます。</p>

<!-- more -->


<h2>MSBuildでビルドする</h2>

<p>C#のプロジェクトをビルドする時には<strong>MSBuild</strong>を使います。</p>

<p>Fakesを導入するとビルド時に必要なモックライブラリを生成してくれます。</p>

<p>この時、<strong>Visual StudioのPremium以上がインストールされていないと自動生成されずビルドに失敗してしまいます。</strong></p>

<p>開発している環境と、Jenkinsを置いている環境が異なる場合は注意が必要です。
私の場合JenkinsサーバにはPremium以上がインストールされていなかったのでこれでハマりました。</p>

<h2>vstest.consoleで単体テストを実行する</h2>

<p>MSTestにFakesを導入して記述した単体テストをコマンドプロンプトから実行します。</p>

<p>この時<em>MSTest.exe</em>では上手く実行できませんでした。
テストの実行自体はできるのですが、Fakesを使っているテストが失敗してしまいます。</p>

<p>そこで使用するのが、<strong>vstest.console.exe</strong>という実行ファイルです。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/jj155800.aspx">コマンド ラインからの VSTest.Console の使用 &ndash; MSDN</a></li>
</ul>


<p>デバッグモードでビルドした際は以下のようなコマンドでテスト実行ができます。</p>

<p><code>
$ vstest.console.exe TestProject\bin\Debug\TestProject.dll
</code></p>

<p>オプションに関しては公式サイトを。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/jj155796.aspx">VSTest.Console.exe コマンド ライン オプション &ndash; MSDN</a></li>
</ul>


<p>私は<code>/Enablecodecoverage</code>でカバレッジ計測、<code>/Logger:trx</code>で結果を出力しています。</p>

<p>さて、ここでまた注意ですが、やはり<strong>Premium以上のVisual Studioのインストールが必須となります。</strong></p>

<p>FakesはPremium以上がインストールされていないと利用できないんですね&hellip;</p>
]]></content>
  </entry>
  
</feed>
