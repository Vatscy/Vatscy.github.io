<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: LINQ | ばしぶろ]]></title>
  <link href="http://vatscy.github.io/blog/categories/linq/atom.xml" rel="self"/>
  <link href="http://vatscy.github.io/"/>
  <updated>2015-01-22T20:26:48+09:00</updated>
  <id>http://vatscy.github.io/</id>
  <author>
    <name><![CDATA[ばつしい]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LINQを使う際に陥りやすい思考の罠]]></title>
    <link href="http://vatscy.github.io/blog/2014/12/03/trap-of-linq/"/>
    <updated>2014-12-03T22:55:47+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/12/03/trap-of-linq</id>
    <content type="html"><![CDATA[<p>※主にLINQ to Objectsの話。LINQ to SQLなどは挙動が違うので注意。</p>

<p>LINQって便利！スタイリッシュ！C#を使い始めて一番感動したのはLINQでした。存在を知ってからしばらくは、いかにLINQを使いまくるか、ばっかり考えてました。しかし、この浅い考えは時に悲劇を生みます。</p>

<p><strong>LINQは仕組みを理解した上で効果的に使うもの</strong>です。今回はLINQを使う際に陥り易い思考の罠について書いてみます。</p>

<!-- more -->


<h1>リストをいくつかの固まりに分割する</h1>

<p>例えば、以下のようなint型のリストがあったとします。</p>

<p><code>
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></p>

<p>これを以下のように順番に3つずつの固まりに分割する<code>Partition</code>メソッドを考えます。</p>

<p><code>csharp
[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]
</code></p>

<p>LINQには以下のメソッドが用意されています。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/bb503062.aspx">Take(int count)</a> &ndash; 先頭から指定した分の要素を返す</li>
<li><a href="http://msdn.microsoft.com/ja-jp/library/bb358985.aspx">Skip(int count)</a> &ndash; 先頭から指定した分だけ飛ばして残りの要素を返す</li>
</ul>


<p>これらを使って実装を考えると、例えばこんな感じ。</p>

<p>```csharp
public static IEnumerable&lt;IEnumerable<T>> Partition<T>(this IEnumerable<T> source, int size)
{</p>

<pre><code>while (source.Count() &gt; 0)
{
    yield return source.Take(size);
    source = source.Skip(size);
}
</code></pre>

<p>}
```</p>

<p>すっきり書けたね！使用例と結果は以下。</p>

<p><code>
var list = new[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
var list2 = list.Partition(3);
// [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]
</code></p>

<h2>しかし実はこれはかなり効率が悪い</h2>

<p>(この先現在執筆中&hellip;)</p>
]]></content>
  </entry>
  
</feed>
