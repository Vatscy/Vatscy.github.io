<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: LINQ | ばしぶろ]]></title>
  <link href="http://vatscy.github.io/blog/categories/linq/atom.xml" rel="self"/>
  <link href="http://vatscy.github.io/"/>
  <updated>2015-02-02T23:31:59+09:00</updated>
  <id>http://vatscy.github.io/</id>
  <author>
    <name><![CDATA[ばつしい]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【C#】LINQを使う際に陥りやすい思考の罠]]></title>
    <link href="http://vatscy.github.io/blog/2014/12/03/trap-of-linq/"/>
    <updated>2014-12-03T22:55:47+09:00</updated>
    <id>http://vatscy.github.io/blog/2014/12/03/trap-of-linq</id>
    <content type="html"><![CDATA[<p>※主にLINQ to Objectsの話。LINQ to SQLなどは挙動が違うので注意。</p>

<p>LINQって便利！スタイリッシュ！C#を使い始めて一番感動したのはLINQでした。存在を知ってからしばらくは、いかにLINQを使いまくるか、ばっかり考えてました。しかし、この浅い考えは時に悲劇を生みます。</p>

<p><strong>LINQは仕組みを理解した上で効果的に使うもの</strong>です。今回はLINQを使う際に陥り易い思考の罠について書いてみます。</p>

<!-- more -->


<h1>LINQを使ったコレクション操作</h1>

<p>例えば、以下のようなint型のリストがあったとします。</p>

<p><code>javascript
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></p>

<p>これを以下のように順番に3つずつの固まりに分割する<code>Partition</code>メソッドを考えます。</p>

<p><code>javascript
[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]
</code></p>

<p>LINQには以下のメソッドが用意されています。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/bb503062.aspx">Take(int count)</a> &ndash; 先頭から指定した分の要素を返す</li>
<li><a href="http://msdn.microsoft.com/ja-jp/library/bb358985.aspx">Skip(int count)</a> &ndash; 先頭から指定した分だけ飛ばして残りの要素を返す</li>
</ul>


<p>これらを使って実装を考えると、例えばこんな感じ。</p>

<p>```csharp
public static IEnumerable&lt;IEnumerable<T>> Partition<T>(this IEnumerable<T> source, int size)
{</p>

<pre><code>while (source.Count() &gt; 0)
{
    yield return source.Take(size);
    source = source.Skip(size);
}
</code></pre>

<p>}
```</p>

<p>おっ、すっきり書けた！使用例と結果は以下。</p>

<p><code>csharp
var list = new[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
var list2 = list.Partition(3);
// [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]
</code></p>

<p><strong>しかし実はこれはかなり効率が悪い。</strong>はっきり言って<strong>とんでもない駄作</strong>です。この事実に気付けるようになるために、LINQの仕組みを理解しましょう。</p>

<h1>IEnumerable&lt;T&gt;の使命</h1>

<p>LINQはIEnumerable&lt;T&gt;インタフェースの拡張メソッドとして定義されています。<strong>List&lt;T&gt;やT[ ]の拡張メソッドではないことに注意！</strong>これ、めちゃめちゃ大事。なのでLINQを扱う際にはIEnumerable&lt;T&gt;の役割を理解することが、めちゃめちゃ大事。</p>

<p>IEnumerable&lt;T&gt;のMSDNには以下のように説明されています。</p>

<blockquote><p>指定した型のコレクションに対する単純な反復処理をサポートする列挙子を公開します。</p></blockquote>

<p>つまり&hellip;どういうことだってばよ？</p>

<p>簡単にIEnumerable&lt;T&gt;と他のコレクションの違いを説明します。</p>

<p>例えば、List&lt;T&gt;やT[ ]は指定したインデックスの要素を自由に取り出すことができます。
<code>csharp
var fib = new[] { 1, 1, 2, 3, 5, 8, 13, 21 };
var fifth = fib[5];
</code></p>

<p>また、Dictionary&lt;T1, T2&gt;はkeyを指定してvalueを取り出すことができます。
```csharp
var urls = new Distionary&lt;string, string> {</p>

<pre><code>{"twitter", "https://twitter.com/"},
{"facebook", "https://www.facebook.com/"},
{"google", "https://www.google.co.jp/"}
</code></pre>

<p>};
var twitterUrl = urls[&ldquo;twitter&rdquo;];
```
これらはそれぞれのコレクションの使命、役割です。</p>

<p>ではIEnumerable&lt;T&gt;の使命は何なのか？それは<strong>要素を1つずつ取り出せること</strong>。それだけ。インデックスやkeyを指定して特定の要素を取り出すことはできず、「何か頂戴」に対して「次はこれね」と返すだけ。</p>

<p>IEnumerable&lt;T&gt;型の変数から中身を取り出す際には<code>foreach</code>を使用します。
```csharp
IEnumerable<int> fib = new[] { 1, 1, 2, 3, 5, 8, 13, 21 };
foreach (var item in fib) {</p>

<pre><code>Console.Write(item + ", "); // 1, 1, 2, 3, 5, 8, 13, 21
</code></pre>

<p>}</p>

<p>var fifth = fib[5]; // これはエラー（インデックスの指定は不可）
```</p>

<p>(現在続きを執筆中&hellip;)</p>
]]></content>
  </entry>
  
</feed>
